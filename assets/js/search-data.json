{
  
    
        "post0": {
            "title": "Data Analysis for Covid19 JHU data",
            "content": "Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . #collapse-hide from datetime import datetime time_format = &quot;%d%b%Y %H:%M&quot; #%b is basic format datetime.now().strftime(time_format) #str format of time . . &#39;08Aug2020 14:24&#39; . #collapse-hide #collapse-hide import os import numpy as np import pandas as pd import matplotlib from IPython.display import display, Markdown from collections import defaultdict from datetime import datetime, timedelta, date import scipy as sci from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.cluster import KMeans import pycountry_convert as pc import folium import branca from scipy.interpolate import make_interp_spline, BSpline import plotly.express as px import json, requests from keras.layers import Input, Dense, Activation, LeakyReLU, Dropout from keras import models from keras.optimizers import RMSprop, Adam from folium import plugins from IPython.display import HTML import warnings warnings.filterwarnings(&#39;ignore&#39;) import matplotlib.pyplot as plt import seaborn as sns from matplotlib import ticker import calmap %matplotlib inline . . Using TensorFlow backend. . #collapse-hide df_confirmed = pd.read_csv(&#39;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv&#39;) df_deaths = pd.read_csv(&#39;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv&#39;) df_recovered = pd.read_csv(&#39;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv&#39;) df_covid19 = pd.read_csv(&quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/web-data/data/cases_country.csv&quot;) df_table = pd.read_csv(&quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/web-data/data/cases_time.csv&quot;,parse_dates=[&#39;Last_Update&#39;]) . . #collapse-hide df_covid19 = df_covid19.drop([&quot;People_Tested&quot;,&quot;People_Hospitalized&quot;,&quot;UID&quot;,&quot;ISO3&quot;,&quot;Mortality_Rate&quot;],axis =1) df_confirmed = df_confirmed.rename(columns={&quot;Province/State&quot;:&quot;state&quot;,&quot;Country/Region&quot;: &quot;country&quot;}) df_deaths = df_deaths.rename(columns={&quot;Province/State&quot;:&quot;state&quot;,&quot;Country/Region&quot;: &quot;country&quot;}) df_covid19 = df_covid19.rename(columns={&quot;Country_Region&quot;: &quot;country&quot;}) df_covid19[&quot;Active&quot;] = df_covid19[&quot;Confirmed&quot;]-df_covid19[&quot;Recovered&quot;]-df_covid19[&quot;Deaths&quot;] # Changing the conuntry names as required by pycountry_convert Lib df_confirmed.loc[df_confirmed[&#39;country&#39;] == &quot;US&quot;, &quot;country&quot;] = &quot;USA&quot; df_deaths.loc[df_deaths[&#39;country&#39;] == &quot;US&quot;, &quot;country&quot;] = &quot;USA&quot; df_covid19.loc[df_covid19[&#39;country&#39;] == &quot;US&quot;, &quot;country&quot;] = &quot;USA&quot; df_table.loc[df_table[&#39;Country_Region&#39;] == &quot;US&quot;, &quot;Country_Region&quot;] = &quot;USA&quot; # df_recovered.loc[df_recovered[&#39;country&#39;] == &quot;US&quot;, &quot;country&quot;] = &quot;USA&quot; df_confirmed.loc[df_confirmed[&#39;country&#39;] == &#39;Korea, South&#39;, &quot;country&quot;] = &#39;South Korea&#39; df_deaths.loc[df_deaths[&#39;country&#39;] == &#39;Korea, South&#39;, &quot;country&quot;] = &#39;South Korea&#39; df_covid19.loc[df_covid19[&#39;country&#39;] == &quot;Korea, South&quot;, &quot;country&quot;] = &quot;South Korea&quot; df_table.loc[df_table[&#39;Country_Region&#39;] == &quot;Korea, South&quot;, &quot;Country_Region&quot;] = &quot;South Korea&quot; # df_recovered.loc[df_recovered[&#39;country&#39;] == &#39;Korea, South&#39;, &quot;country&quot;] = &#39;South Korea&#39; df_confirmed.loc[df_confirmed[&#39;country&#39;] == &#39;Taiwan*&#39;, &quot;country&quot;] = &#39;Taiwan&#39; df_deaths.loc[df_deaths[&#39;country&#39;] == &#39;Taiwan*&#39;, &quot;country&quot;] = &#39;Taiwan&#39; df_covid19.loc[df_covid19[&#39;country&#39;] == &quot;Taiwan*&quot;, &quot;country&quot;] = &quot;Taiwan&quot; df_table.loc[df_table[&#39;Country_Region&#39;] == &quot;Taiwan*&quot;, &quot;Country_Region&quot;] = &quot;Taiwan&quot; # df_recovered.loc[df_recovered[&#39;country&#39;] == &#39;Taiwan*&#39;, &quot;country&quot;] = &#39;Taiwan&#39; df_confirmed.loc[df_confirmed[&#39;country&#39;] == &#39;Congo (Kinshasa)&#39;, &quot;country&quot;] = &#39;Democratic Republic of the Congo&#39; df_deaths.loc[df_deaths[&#39;country&#39;] == &#39;Congo (Kinshasa)&#39;, &quot;country&quot;] = &#39;Democratic Republic of the Congo&#39; df_covid19.loc[df_covid19[&#39;country&#39;] == &quot;Congo (Kinshasa)&quot;, &quot;country&quot;] = &quot;Democratic Republic of the Congo&quot; df_table.loc[df_table[&#39;Country_Region&#39;] == &quot;Congo (Kinshasa)&quot;, &quot;Country_Region&quot;] = &quot;Democratic Republic of the Congo&quot; # df_recovered.loc[df_recovered[&#39;country&#39;] == &#39;Congo (Kinshasa)&#39;, &quot;country&quot;] = &#39;Democratic Republic of the Congo&#39; df_confirmed.loc[df_confirmed[&#39;country&#39;] == &quot;Cote d&#39;Ivoire&quot;, &quot;country&quot;] = &quot;Côte d&#39;Ivoire&quot; df_deaths.loc[df_deaths[&#39;country&#39;] == &quot;Cote d&#39;Ivoire&quot;, &quot;country&quot;] = &quot;Côte d&#39;Ivoire&quot; df_covid19.loc[df_covid19[&#39;country&#39;] == &quot;Cote d&#39;Ivoire&quot;, &quot;country&quot;] = &quot;Côte d&#39;Ivoire&quot; df_table.loc[df_table[&#39;Country_Region&#39;] == &quot;Cote d&#39;Ivoire&quot;, &quot;Country_Region&quot;] = &quot;Côte d&#39;Ivoire&quot; # df_recovered.loc[df_recovered[&#39;country&#39;] == &quot;Cote d&#39;Ivoire&quot;, &quot;country&quot;] = &quot;Côte d&#39;Ivoire&quot; df_confirmed.loc[df_confirmed[&#39;country&#39;] == &quot;Reunion&quot;, &quot;country&quot;] = &quot;Réunion&quot; df_deaths.loc[df_deaths[&#39;country&#39;] == &quot;Reunion&quot;, &quot;country&quot;] = &quot;Réunion&quot; df_covid19.loc[df_covid19[&#39;country&#39;] == &quot;Reunion&quot;, &quot;country&quot;] = &quot;Réunion&quot; df_table.loc[df_table[&#39;Country_Region&#39;] == &quot;Reunion&quot;, &quot;Country_Region&quot;] = &quot;Réunion&quot; # df_recovered.loc[df_recovered[&#39;country&#39;] == &quot;Reunion&quot;, &quot;country&quot;] = &quot;Réunion&quot; df_confirmed.loc[df_confirmed[&#39;country&#39;] == &#39;Congo (Brazzaville)&#39;, &quot;country&quot;] = &#39;Republic of the Congo&#39; df_deaths.loc[df_deaths[&#39;country&#39;] == &#39;Congo (Brazzaville)&#39;, &quot;country&quot;] = &#39;Republic of the Congo&#39; df_covid19.loc[df_covid19[&#39;country&#39;] == &quot;Congo (Brazzaville)&quot;, &quot;country&quot;] = &quot;Republic of the Congo&quot; df_table.loc[df_table[&#39;Country_Region&#39;] == &quot;Congo (Brazzaville)&quot;, &quot;Country_Region&quot;] = &quot;Republic of the Congo&quot; # df_recovered.loc[df_recovered[&#39;country&#39;] == &#39;Congo (Brazzaville)&#39;, &quot;country&quot;] = &#39;Republic of the Congo&#39; df_confirmed.loc[df_confirmed[&#39;country&#39;] == &#39;Bahamas, The&#39;, &quot;country&quot;] = &#39;Bahamas&#39; df_deaths.loc[df_deaths[&#39;country&#39;] == &#39;Bahamas, The&#39;, &quot;country&quot;] = &#39;Bahamas&#39; df_covid19.loc[df_covid19[&#39;country&#39;] == &quot;Bahamas, The&quot;, &quot;country&quot;] = &quot;Bahamas&quot; df_table.loc[df_table[&#39;Country_Region&#39;] == &quot;Bahamas, The&quot;, &quot;Country_Region&quot;] = &quot;Bahamas&quot; # df_recovered.loc[df_recovered[&#39;country&#39;] == &#39;Bahamas, The&#39;, &quot;country&quot;] = &#39;Bahamas&#39; df_confirmed.loc[df_confirmed[&#39;country&#39;] == &#39;Gambia, The&#39;, &quot;country&quot;] = &#39;Gambia&#39; df_deaths.loc[df_deaths[&#39;country&#39;] == &#39;Gambia, The&#39;, &quot;country&quot;] = &#39;Gambia&#39; df_covid19.loc[df_covid19[&#39;country&#39;] == &quot;Gambia, The&quot;, &quot;country&quot;] = &quot;Gambia&quot; df_table.loc[df_table[&#39;Country_Region&#39;] == &quot;Gambia&quot;, &quot;Country_Region&quot;] = &quot;Gambia&quot; # df_recovered.loc[df_recovered[&#39;country&#39;] == &#39;Gambia, The&#39;, &quot;country&quot;] = &#39;Gambia&#39; . . #collapse-hide # getting all countries countries = np.asarray(df_confirmed[&quot;country&quot;]) countries1 = np.asarray(df_covid19[&quot;country&quot;]) # Continent_code to Continent_names continents = { &#39;NA&#39;: &#39;North America&#39;, &#39;SA&#39;: &#39;South America&#39;, &#39;AS&#39;: &#39;Asia&#39;, &#39;OC&#39;: &#39;Australia&#39;, &#39;AF&#39;: &#39;Africa&#39;, &#39;EU&#39; : &#39;Europe&#39;, &#39;na&#39; : &#39;Others&#39; } # Defininng Function for getting continent code for country. def country_to_continent_code(country): try: return pc.country_alpha2_to_continent_code(pc.country_name_to_country_alpha2(country)) except : return &#39;na&#39; #Collecting Continent Information df_confirmed.insert(2,&quot;continent&quot;, [continents[country_to_continent_code(country)] for country in countries[:]]) df_deaths.insert(2,&quot;continent&quot;, [continents[country_to_continent_code(country)] for country in countries[:]]) df_covid19.insert(1,&quot;continent&quot;, [continents[country_to_continent_code(country)] for country in countries1[:]]) df_table.insert(1,&quot;continent&quot;, [continents[country_to_continent_code(country)] for country in df_table[&quot;Country_Region&quot;].values]) . . #collapse-hide df_table = df_table[df_table[&quot;continent&quot;] != &quot;Others&quot;] df_confirmed = df_confirmed.replace(np.nan, &#39;&#39;, regex=True) df_deaths = df_deaths.replace(np.nan, &#39;&#39;, regex=True) . . #collapse-hide def plot_params(ax,axis_label= None, plt_title = None,label_size=15, axis_fsize = 15, title_fsize = 20, scale = &#39;linear&#39; ): # Tick-Parameters ax.xaxis.set_minor_locator(ticker.AutoMinorLocator()) ax.yaxis.set_minor_locator(ticker.AutoMinorLocator()) ax.tick_params(which=&#39;both&#39;, width=1,labelsize=label_size) ax.tick_params(which=&#39;major&#39;, length=6) ax.tick_params(which=&#39;minor&#39;, length=3, color=&#39;0.8&#39;) # Grid plt.grid(lw = 1, ls = &#39;-&#39;, c = &quot;0.7&quot;, which = &#39;major&#39;) plt.grid(lw = 1, ls = &#39;-&#39;, c = &quot;0.9&quot;, which = &#39;minor&#39;) # Plot Title plt.title( plt_title,{&#39;fontsize&#39;:title_fsize}) # Yaxis sacle plt.yscale(scale) plt.minorticks_on() # Plot Axes Labels xl = plt.xlabel(axis_label[0],fontsize = axis_fsize) yl = plt.ylabel(axis_label[1],fontsize = axis_fsize) . . #collapse-hide def visualize_covid_cases(confirmed, deaths, continent=None , country = None , state = None, period = None, figure = None, scale = &quot;linear&quot;): x = 0 if figure == None: f = plt.figure(figsize=(10,10)) # Sub plot ax = f.add_subplot(111) else : f = figure[0] # Sub plot ax = f.add_subplot(figure[1],figure[2],figure[3]) ax.set_axisbelow(True) plt.tight_layout(pad=10, w_pad=5, h_pad=5) stats = [confirmed, deaths] label = [&quot;Confirmed&quot;, &quot;Deaths&quot;] if continent != None: params = [&quot;continent&quot;,continent] elif country != None: params = [&quot;country&quot;,country] else: params = [&quot;All&quot;, &quot;All&quot;] color = [&quot;darkcyan&quot;,&quot;crimson&quot;] marker_style = dict(linewidth=3, linestyle=&#39;-&#39;, marker=&#39;o&#39;,markersize=4, markerfacecolor=&#39;#ffffff&#39;) for i,stat in enumerate(stats): if params[1] == &quot;All&quot; : cases = np.sum(np.asarray(stat.iloc[:,5:]),axis = 0)[x:] else : cases = np.sum(np.asarray(stat[stat[params[0]] == params[1]].iloc[:,5:]),axis = 0)[x:] date = np.arange(1,cases.shape[0]+1)[x:] plt.plot(date,cases,label = label[i]+&quot; (Total : &quot;+str(cases[-1])+&quot;)&quot;,color=color[i],**marker_style) plt.fill_between(date,cases,color=color[i],alpha=0.3) if params[1] == &quot;All&quot; : Total_confirmed = np.sum(np.asarray(stats[0].iloc[:,5:]),axis = 0)[x:] Total_deaths = np.sum(np.asarray(stats[1].iloc[:,5:]),axis = 0)[x:] else : Total_confirmed = np.sum(np.asarray(stats[0][stat[params[0]] == params[1]].iloc[:,5:]),axis = 0)[x:] Total_deaths = np.sum(np.asarray(stats[1][stat[params[0]] == params[1]].iloc[:,5:]),axis = 0)[x:] text = &quot;From &quot;+stats[0].columns[5]+&quot; to &quot;+stats[0].columns[-1]+&quot; n&quot; text += &quot;Mortality rate : &quot;+ str(int(Total_deaths[-1]/(Total_confirmed[-1])*10000)/100)+&quot; n&quot; text += &quot;Last 5 Days: n&quot; text += &quot;Confirmed : &quot; + str(Total_confirmed[-1] - Total_confirmed[-6])+&quot; n&quot; text += &quot;Deaths : &quot; + str(Total_deaths[-1] - Total_deaths[-6])+&quot; n&quot; text += &quot;Last 24 Hours: n&quot; text += &quot;Confirmed : &quot; + str(Total_confirmed[-1] - Total_confirmed[-2])+&quot; n&quot; text += &quot;Deaths : &quot; + str(Total_deaths[-1] - Total_deaths[-2])+&quot; n&quot; plt.text(0.02, 0.78, text, fontsize=15, horizontalalignment=&#39;left&#39;, verticalalignment=&#39;top&#39;, transform=ax.transAxes,bbox=dict(facecolor=&#39;white&#39;, alpha=0.4)) # Plot Axes Labels axis_label = [&quot;Days (&quot;+df_confirmed.columns[5]+&quot; - &quot;+df_confirmed.columns[-1]+&quot;)&quot;,&quot;No of Cases&quot;] # Plot Parameters plot_params(ax,axis_label,scale = scale) # Plot Title if params[1] == &quot;All&quot; : plt.title(&quot;COVID-19 Cases World&quot;,{&#39;fontsize&#39;:25}) else: plt.title(&quot;COVID-19: &quot;+params[1] ,{&#39;fontsize&#39;:25}) # Legend Location l = plt.legend(loc= &quot;best&quot;,fontsize = 15) if figure == None: plt.show() . . #collapse-hide def get_total_cases(cases, country = &quot;All&quot;): if(country == &quot;All&quot;) : return np.sum(np.asarray(cases.iloc[:,5:]),axis = 0)[-1] else : return np.sum(np.asarray(cases[cases[&quot;country&quot;] == country].iloc[:,5:]),axis = 0)[-1] . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . #collapse-show import pandas as pd import altair as alt cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://skelwadkar.github.io/Covid19_dashboard/2020/08/08/project-covid19.html",
            "relUrl": "/2020/08/08/project-covid19.html",
            "date": " • Aug 8, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://skelwadkar.github.io/Covid19_dashboard/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://skelwadkar.github.io/Covid19_dashboard/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://skelwadkar.github.io/Covid19_dashboard/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}
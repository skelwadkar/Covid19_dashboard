{
  
    
        "post0": {
            "title": "Data Analysis for Covid19 JHU data",
            "content": "#collapse-hide import altair as alt import os import numpy as np import pandas as pd import matplotlib from IPython.display import display, Markdown from collections import defaultdict from datetime import datetime, timedelta, date import scipy as sci from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.cluster import KMeans import pycountry_convert as pc import folium import branca from scipy.interpolate import make_interp_spline, BSpline import plotly.express as px import json, requests from keras.layers import Input, Dense, Activation, LeakyReLU, Dropout from keras import models from keras.optimizers import RMSprop, Adam from folium import plugins from IPython.display import HTML import warnings warnings.filterwarnings(&#39;ignore&#39;) import matplotlib.pyplot as plt import seaborn as sns from matplotlib import ticker import calmap %config InlineBackend.figure_format = &#39;retina&#39; chart_width = 550 chart_height= 400 . . Using TensorFlow backend. . #collapse-hide df_confirmed = pd.read_csv(&#39;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv&#39;) df_deaths = pd.read_csv(&#39;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv&#39;) df_recovered = pd.read_csv(&#39;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv&#39;) df_covid19 = pd.read_csv(&quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/web-data/data/cases_country.csv&quot;) df_table = pd.read_csv(&quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/web-data/data/cases_time.csv&quot;,parse_dates=[&#39;Last_Update&#39;]) . . #collapse-hide df_covid19 = df_covid19.drop([&quot;People_Tested&quot;,&quot;People_Hospitalized&quot;,&quot;UID&quot;,&quot;ISO3&quot;,&quot;Mortality_Rate&quot;],axis =1) df_confirmed = df_confirmed.rename(columns={&quot;Province/State&quot;:&quot;state&quot;,&quot;Country/Region&quot;: &quot;country&quot;}) df_deaths = df_deaths.rename(columns={&quot;Province/State&quot;:&quot;state&quot;,&quot;Country/Region&quot;: &quot;country&quot;}) df_covid19 = df_covid19.rename(columns={&quot;Country_Region&quot;: &quot;country&quot;}) df_covid19[&quot;Active&quot;] = df_covid19[&quot;Confirmed&quot;]-df_covid19[&quot;Recovered&quot;]-df_covid19[&quot;Deaths&quot;] # Changing the conuntry names as required by pycountry_convert Lib df_confirmed.loc[df_confirmed[&#39;country&#39;] == &quot;US&quot;, &quot;country&quot;] = &quot;USA&quot; df_deaths.loc[df_deaths[&#39;country&#39;] == &quot;US&quot;, &quot;country&quot;] = &quot;USA&quot; df_covid19.loc[df_covid19[&#39;country&#39;] == &quot;US&quot;, &quot;country&quot;] = &quot;USA&quot; df_table.loc[df_table[&#39;Country_Region&#39;] == &quot;US&quot;, &quot;Country_Region&quot;] = &quot;USA&quot; # df_recovered.loc[df_recovered[&#39;country&#39;] == &quot;US&quot;, &quot;country&quot;] = &quot;USA&quot; df_confirmed.loc[df_confirmed[&#39;country&#39;] == &#39;Korea, South&#39;, &quot;country&quot;] = &#39;South Korea&#39; df_deaths.loc[df_deaths[&#39;country&#39;] == &#39;Korea, South&#39;, &quot;country&quot;] = &#39;South Korea&#39; df_covid19.loc[df_covid19[&#39;country&#39;] == &quot;Korea, South&quot;, &quot;country&quot;] = &quot;South Korea&quot; df_table.loc[df_table[&#39;Country_Region&#39;] == &quot;Korea, South&quot;, &quot;Country_Region&quot;] = &quot;South Korea&quot; # df_recovered.loc[df_recovered[&#39;country&#39;] == &#39;Korea, South&#39;, &quot;country&quot;] = &#39;South Korea&#39; df_confirmed.loc[df_confirmed[&#39;country&#39;] == &#39;Taiwan*&#39;, &quot;country&quot;] = &#39;Taiwan&#39; df_deaths.loc[df_deaths[&#39;country&#39;] == &#39;Taiwan*&#39;, &quot;country&quot;] = &#39;Taiwan&#39; df_covid19.loc[df_covid19[&#39;country&#39;] == &quot;Taiwan*&quot;, &quot;country&quot;] = &quot;Taiwan&quot; df_table.loc[df_table[&#39;Country_Region&#39;] == &quot;Taiwan*&quot;, &quot;Country_Region&quot;] = &quot;Taiwan&quot; # df_recovered.loc[df_recovered[&#39;country&#39;] == &#39;Taiwan*&#39;, &quot;country&quot;] = &#39;Taiwan&#39; df_confirmed.loc[df_confirmed[&#39;country&#39;] == &#39;Congo (Kinshasa)&#39;, &quot;country&quot;] = &#39;Democratic Republic of the Congo&#39; df_deaths.loc[df_deaths[&#39;country&#39;] == &#39;Congo (Kinshasa)&#39;, &quot;country&quot;] = &#39;Democratic Republic of the Congo&#39; df_covid19.loc[df_covid19[&#39;country&#39;] == &quot;Congo (Kinshasa)&quot;, &quot;country&quot;] = &quot;Democratic Republic of the Congo&quot; df_table.loc[df_table[&#39;Country_Region&#39;] == &quot;Congo (Kinshasa)&quot;, &quot;Country_Region&quot;] = &quot;Democratic Republic of the Congo&quot; # df_recovered.loc[df_recovered[&#39;country&#39;] == &#39;Congo (Kinshasa)&#39;, &quot;country&quot;] = &#39;Democratic Republic of the Congo&#39; df_confirmed.loc[df_confirmed[&#39;country&#39;] == &quot;Cote d&#39;Ivoire&quot;, &quot;country&quot;] = &quot;Côte d&#39;Ivoire&quot; df_deaths.loc[df_deaths[&#39;country&#39;] == &quot;Cote d&#39;Ivoire&quot;, &quot;country&quot;] = &quot;Côte d&#39;Ivoire&quot; df_covid19.loc[df_covid19[&#39;country&#39;] == &quot;Cote d&#39;Ivoire&quot;, &quot;country&quot;] = &quot;Côte d&#39;Ivoire&quot; df_table.loc[df_table[&#39;Country_Region&#39;] == &quot;Cote d&#39;Ivoire&quot;, &quot;Country_Region&quot;] = &quot;Côte d&#39;Ivoire&quot; # df_recovered.loc[df_recovered[&#39;country&#39;] == &quot;Cote d&#39;Ivoire&quot;, &quot;country&quot;] = &quot;Côte d&#39;Ivoire&quot; df_confirmed.loc[df_confirmed[&#39;country&#39;] == &quot;Reunion&quot;, &quot;country&quot;] = &quot;Réunion&quot; df_deaths.loc[df_deaths[&#39;country&#39;] == &quot;Reunion&quot;, &quot;country&quot;] = &quot;Réunion&quot; df_covid19.loc[df_covid19[&#39;country&#39;] == &quot;Reunion&quot;, &quot;country&quot;] = &quot;Réunion&quot; df_table.loc[df_table[&#39;Country_Region&#39;] == &quot;Reunion&quot;, &quot;Country_Region&quot;] = &quot;Réunion&quot; # df_recovered.loc[df_recovered[&#39;country&#39;] == &quot;Reunion&quot;, &quot;country&quot;] = &quot;Réunion&quot; df_confirmed.loc[df_confirmed[&#39;country&#39;] == &#39;Congo (Brazzaville)&#39;, &quot;country&quot;] = &#39;Republic of the Congo&#39; df_deaths.loc[df_deaths[&#39;country&#39;] == &#39;Congo (Brazzaville)&#39;, &quot;country&quot;] = &#39;Republic of the Congo&#39; df_covid19.loc[df_covid19[&#39;country&#39;] == &quot;Congo (Brazzaville)&quot;, &quot;country&quot;] = &quot;Republic of the Congo&quot; df_table.loc[df_table[&#39;Country_Region&#39;] == &quot;Congo (Brazzaville)&quot;, &quot;Country_Region&quot;] = &quot;Republic of the Congo&quot; # df_recovered.loc[df_recovered[&#39;country&#39;] == &#39;Congo (Brazzaville)&#39;, &quot;country&quot;] = &#39;Republic of the Congo&#39; df_confirmed.loc[df_confirmed[&#39;country&#39;] == &#39;Bahamas, The&#39;, &quot;country&quot;] = &#39;Bahamas&#39; df_deaths.loc[df_deaths[&#39;country&#39;] == &#39;Bahamas, The&#39;, &quot;country&quot;] = &#39;Bahamas&#39; df_covid19.loc[df_covid19[&#39;country&#39;] == &quot;Bahamas, The&quot;, &quot;country&quot;] = &quot;Bahamas&quot; df_table.loc[df_table[&#39;Country_Region&#39;] == &quot;Bahamas, The&quot;, &quot;Country_Region&quot;] = &quot;Bahamas&quot; # df_recovered.loc[df_recovered[&#39;country&#39;] == &#39;Bahamas, The&#39;, &quot;country&quot;] = &#39;Bahamas&#39; df_confirmed.loc[df_confirmed[&#39;country&#39;] == &#39;Gambia, The&#39;, &quot;country&quot;] = &#39;Gambia&#39; df_deaths.loc[df_deaths[&#39;country&#39;] == &#39;Gambia, The&#39;, &quot;country&quot;] = &#39;Gambia&#39; df_covid19.loc[df_covid19[&#39;country&#39;] == &quot;Gambia, The&quot;, &quot;country&quot;] = &quot;Gambia&quot; df_table.loc[df_table[&#39;Country_Region&#39;] == &quot;Gambia&quot;, &quot;Country_Region&quot;] = &quot;Gambia&quot; # df_recovered.loc[df_recovered[&#39;country&#39;] == &#39;Gambia, The&#39;, &quot;country&quot;] = &#39;Gambia&#39; . . #collapse-hide # getting all countries countries = np.asarray(df_confirmed[&quot;country&quot;]) countries1 = np.asarray(df_covid19[&quot;country&quot;]) # Continent_code to Continent_names continents = { &#39;NA&#39;: &#39;North America&#39;, &#39;SA&#39;: &#39;South America&#39;, &#39;AS&#39;: &#39;Asia&#39;, &#39;OC&#39;: &#39;Australia&#39;, &#39;AF&#39;: &#39;Africa&#39;, &#39;EU&#39; : &#39;Europe&#39;, &#39;na&#39; : &#39;Others&#39; } # Defininng Function for getting continent code for country. def country_to_continent_code(country): try: return pc.country_alpha2_to_continent_code(pc.country_name_to_country_alpha2(country)) except : return &#39;na&#39; #Collecting Continent Information df_confirmed.insert(2,&quot;continent&quot;, [continents[country_to_continent_code(country)] for country in countries[:]]) df_deaths.insert(2,&quot;continent&quot;, [continents[country_to_continent_code(country)] for country in countries[:]]) df_covid19.insert(1,&quot;continent&quot;, [continents[country_to_continent_code(country)] for country in countries1[:]]) df_table.insert(1,&quot;continent&quot;, [continents[country_to_continent_code(country)] for country in df_table[&quot;Country_Region&quot;].values]) . . #collapse-hide df_table = df_table[df_table[&quot;continent&quot;] != &quot;Others&quot;] df_confirmed = df_confirmed.replace(np.nan, &#39;&#39;, regex=True) df_deaths = df_deaths.replace(np.nan, &#39;&#39;, regex=True) . . #collapse-hide df_countries_cases = df_covid19.copy().drop([&#39;Lat&#39;,&#39;Long_&#39;,&#39;continent&#39;,&#39;Last_Update&#39;],axis =1) df_countries_cases.index = df_countries_cases[&quot;country&quot;] df_countries_cases = df_countries_cases.drop([&#39;country&#39;],axis=1) df_continents_cases = df_covid19.copy().drop([&#39;Lat&#39;,&#39;Long_&#39;,&#39;country&#39;,&#39;Last_Update&#39;],axis =1) df_continents_cases = df_continents_cases.groupby([&quot;continent&quot;]).sum() df_countries_cases.fillna(0,inplace=True) df_continents_cases.fillna(0,inplace=True) . . #collapse-hide df_t = pd.DataFrame(pd.to_numeric(df_countries_cases.sum()),dtype=np.float64).transpose() df_t[&quot;Mortality Rate (per 100)&quot;] = np.round(100*df_t[&quot;Deaths&quot;]/df_t[&quot;Confirmed&quot;],2) df_t.style.background_gradient(cmap=&#39;Wistia&#39;,axis=1).format(&quot;{:.2f}&quot;).format(&quot;{:.0f}&quot;,subset=[&quot;Confirmed&quot;,&quot;Deaths&quot;,&quot;Recovered&quot;,&quot;Active&quot;]) . . Confirmed Deaths Recovered Active Incident_Rate Mortality Rate (per 100) . 0 20306856 | 741723 | 12601929 | 6857996 | 61512.21 | 3.65 | . #collapse-hide df_continents_cases[&quot;Mortality Rate (per 100)&quot;] = np.round(100*df_continents_cases[&quot;Deaths&quot;]/df_continents_cases[&quot;Confirmed&quot;],2) df_continents_cases.style.background_gradient(cmap=&#39;Blues&#39;,subset=[&quot;Confirmed&quot;]) .background_gradient(cmap=&#39;Reds&#39;,subset=[&quot;Deaths&quot;]) .background_gradient(cmap=&#39;Greens&#39;,subset=[&quot;Recovered&quot;]) .background_gradient(cmap=&#39;Purples&#39;,subset=[&quot;Active&quot;]) .background_gradient(cmap=&#39;Pastel1_r&#39;,subset=[&quot;Incident_Rate&quot;]) .background_gradient(cmap=&#39;YlOrBr&#39;,subset=[&quot;Mortality Rate (per 100)&quot;]) .format(&quot;{:.2f}&quot;) .format(&quot;{:.0f}&quot;,subset=[&quot;Confirmed&quot;,&quot;Deaths&quot;,&quot;Recovered&quot;,&quot;Active&quot;]) . . Confirmed Deaths Recovered Active Incident_Rate Mortality Rate (per 100) . continent . Africa 1061880 | 23804 | 756445 | 281631 | 5255.89 | 2.24 | . Asia 5203889 | 112584 | 3955859 | 1135446 | 19675.98 | 2.16 | . Australia 23938 | 378 | 14394 | 9166 | 124.87 | 1.58 | . Europe 3067641 | 206296 | 1771585 | 984559 | 17645.38 | 6.72 | . North America 6083569 | 235558 | 2399879 | 3448132 | 7206.44 | 3.87 | . Others 41915 | 1059 | 25215 | 15634 | 3228.54 | 2.53 | . South America 4824024 | 162044 | 3678552 | 983428 | 8375.10 | 3.36 | . #collapse-hide df_countries_cases[&quot;Mortality Rate (per 100)&quot;] = np.round(100*df_countries_cases[&quot;Deaths&quot;]/df_countries_cases[&quot;Confirmed&quot;],2) df_countries_cases.sort_values(&#39;Confirmed&#39;, ascending= False).style.background_gradient(cmap=&#39;Blues&#39;,subset=[&quot;Confirmed&quot;]) .background_gradient(cmap=&#39;Reds&#39;,subset=[&quot;Deaths&quot;]) .background_gradient(cmap=&#39;Greens&#39;,subset=[&quot;Recovered&quot;]) .background_gradient(cmap=&#39;Purples&#39;,subset=[&quot;Active&quot;]) .background_gradient(cmap=&#39;Pastel1_r&#39;,subset=[&quot;Incident_Rate&quot;]) .background_gradient(cmap=&#39;YlOrBr&#39;,subset=[&quot;Mortality Rate (per 100)&quot;]) .format(&quot;{:.2f}&quot;) .format(&quot;{:.0f}&quot;,subset=[&quot;Confirmed&quot;,&quot;Deaths&quot;,&quot;Recovered&quot;,&quot;Active&quot;]) . . Confirmed Deaths Recovered Active Incident_Rate Mortality Rate (per 100) . country . USA 5141208 | 164537 | 1714960 | 3261711 | 1560.47 | 3.20 | . Brazil 3057470 | 101752 | 2449338 | 506380 | 1438.41 | 3.33 | . India 2329638 | 46091 | 1639599 | 643948 | 168.81 | 1.98 | . Russia 900745 | 15231 | 708900 | 176614 | 617.23 | 1.69 | . South Africa 566109 | 10751 | 426125 | 129233 | 954.51 | 1.90 | . Mexico 492522 | 53929 | 397278 | 41315 | 385.41 | 10.95 | . Peru 489680 | 21501 | 329404 | 138775 | 1485.15 | 4.39 | . Colombia 410453 | 13475 | 230427 | 166551 | 806.66 | 3.28 | . Chile 376616 | 10178 | 349541 | 16897 | 1970.14 | 2.70 | . Iran 331189 | 18800 | 288620 | 23769 | 394.31 | 5.68 | . Spain 326612 | 28581 | 150376 | 147655 | 698.56 | 8.75 | . United Kingdom 313402 | 46611 | 1465 | 265326 | 461.66 | 14.87 | . Saudi Arabia 291468 | 3233 | 255118 | 33117 | 837.22 | 1.11 | . Pakistan 285921 | 6129 | 263193 | 16599 | 129.44 | 2.14 | . Bangladesh 263503 | 3471 | 151972 | 108060 | 160.00 | 1.32 | . Argentina 260911 | 5004 | 181389 | 74518 | 577.29 | 1.92 | . Italy 251237 | 35215 | 202461 | 13561 | 415.53 | 14.02 | . Turkey 243180 | 5873 | 226155 | 11152 | 288.34 | 2.42 | . France 239355 | 30328 | 82971 | 126056 | 366.70 | 12.67 | . Germany 219618 | 9213 | 198832 | 11573 | 262.12 | 4.20 | . Iraq 156995 | 5531 | 112102 | 39362 | 390.32 | 3.52 | . Philippines 143749 | 2404 | 68997 | 72348 | 131.18 | 1.67 | . Indonesia 130718 | 5903 | 85798 | 39017 | 47.79 | 4.52 | . Canada 122389 | 9038 | 108465 | 4886 | 323.30 | 7.38 | . Qatar 113646 | 188 | 110324 | 3134 | 3944.59 | 0.17 | . Kazakhstan 100855 | 1269 | 74677 | 24909 | 537.13 | 1.26 | . Egypt 95834 | 5059 | 54888 | 35887 | 93.65 | 5.28 | . Ecuador 95563 | 5951 | 78610 | 11002 | 541.65 | 6.23 | . Bolivia 93328 | 3761 | 31753 | 57814 | 799.52 | 4.03 | . China 88958 | 4693 | 82440 | 1825 | 6.33 | 5.28 | . Israel 86959 | 622 | 61576 | 24761 | 1004.66 | 0.72 | . Ukraine 86504 | 1999 | 47084 | 37421 | 197.80 | 2.31 | . Sweden 83126 | 5770 | 0 | 0 | 823.09 | 6.94 | . Oman 82050 | 533 | 76720 | 4797 | 1606.74 | 0.65 | . Dominican Republic 81094 | 1346 | 45666 | 34082 | 747.55 | 1.66 | . Panama 76464 | 1680 | 50665 | 24119 | 1772.15 | 2.20 | . Belgium 75008 | 9885 | 17841 | 47282 | 647.20 | 13.18 | . Kuwait 73068 | 486 | 64759 | 7823 | 1710.97 | 0.67 | . Belarus 69005 | 592 | 65219 | 3194 | 730.26 | 0.86 | . Romania 63762 | 2764 | 30585 | 30413 | 331.44 | 4.33 | . United Arab Emirates 62966 | 358 | 56961 | 5647 | 636.64 | 0.57 | . Netherlands 60954 | 6180 | 253 | 54521 | 355.73 | 10.14 | . Guatemala 57966 | 2233 | 46442 | 9291 | 323.55 | 3.85 | . Singapore 55395 | 27 | 50128 | 5240 | 946.87 | 0.05 | . Poland 52961 | 1821 | 37150 | 13990 | 139.94 | 3.44 | . Portugal 52945 | 1761 | 38760 | 12424 | 519.24 | 3.33 | . Japan 50589 | 1058 | 34136 | 15395 | 40.00 | 2.09 | . Honduras 48403 | 1515 | 6805 | 40083 | 488.69 | 3.13 | . Nigeria 47290 | 956 | 33609 | 12725 | 22.94 | 2.02 | . Bahrain 44804 | 165 | 41504 | 3135 | 2633.08 | 0.37 | . Ghana 41404 | 215 | 39055 | 2134 | 133.25 | 0.52 | . Armenia 40794 | 806 | 33492 | 6496 | 1376.67 | 1.98 | . Kyrgyzstan 40759 | 1484 | 32997 | 6278 | 624.74 | 3.64 | . Afghanistan 37345 | 1354 | 26694 | 9297 | 95.93 | 3.63 | . Switzerland 36895 | 1990 | 32700 | 2205 | 426.30 | 5.39 | . Algeria 36204 | 1322 | 25263 | 9619 | 82.56 | 3.65 | . Morocco 35195 | 533 | 25385 | 9277 | 95.35 | 1.51 | . Azerbaijan 33731 | 495 | 30856 | 2380 | 332.68 | 1.47 | . Uzbekistan 32215 | 208 | 24090 | 7917 | 96.25 | 0.65 | . Serbia 28497 | 652 | 0 | 0 | 326.15 | 2.29 | . Moldova 28223 | 857 | 19740 | 7626 | 699.63 | 3.04 | . Venezuela 27938 | 238 | 19706 | 7994 | 98.25 | 0.85 | . Kenya 27425 | 438 | 13867 | 13120 | 51.00 | 1.60 | . Ireland 26801 | 1773 | 23364 | 1664 | 542.77 | 6.62 | . Costa Rica 24508 | 255 | 7971 | 16282 | 481.10 | 1.04 | . Ethiopia 24175 | 440 | 10696 | 13039 | 21.03 | 1.82 | . Nepal 23948 | 83 | 16664 | 7201 | 82.19 | 0.35 | . Austria 22245 | 723 | 20123 | 1399 | 246.99 | 3.25 | . Australia 22127 | 352 | 12779 | 8996 | 86.91 | 1.59 | . El Salvador 21269 | 577 | 9897 | 10795 | 327.91 | 2.71 | . Czechia 18783 | 391 | 13222 | 5170 | 175.39 | 2.08 | . Cameroon 18213 | 398 | 15320 | 2495 | 68.61 | 2.19 | . Côte d&#39;Ivoire 16847 | 105 | 13321 | 3421 | 63.87 | 0.62 | . Denmark 15297 | 621 | 13227 | 1449 | 264.10 | 4.06 | . West Bank and Gaza 14875 | 104 | 8181 | 6590 | 291.59 | 0.70 | . South Korea 14714 | 305 | 13786 | 623 | 28.70 | 2.07 | . Bosnia and Herzegovina 14708 | 447 | 8411 | 5850 | 448.30 | 3.04 | . Bulgaria 13722 | 471 | 8154 | 5097 | 197.48 | 3.43 | . Madagascar 13317 | 152 | 11276 | 1889 | 48.09 | 1.14 | . North Macedonia 12083 | 529 | 8248 | 3306 | 579.97 | 4.38 | . Sudan 12033 | 786 | 6282 | 4965 | 27.44 | 6.53 | . Senegal 11380 | 238 | 7449 | 3693 | 67.96 | 2.09 | . Kosovo 10419 | 341 | 6058 | 4020 | 575.52 | 3.27 | . Norway 9751 | 256 | 8857 | 638 | 179.87 | 2.63 | . Democratic Republic of the Congo 9499 | 225 | 8375 | 899 | 10.61 | 2.37 | . Malaysia 9103 | 125 | 8809 | 169 | 28.13 | 1.37 | . Zambia 8275 | 241 | 7004 | 1030 | 45.01 | 2.91 | . Guinea 8018 | 50 | 7020 | 948 | 61.05 | 0.62 | . Gabon 8006 | 51 | 5823 | 2132 | 359.70 | 0.64 | . Tajikistan 7871 | 63 | 6653 | 1155 | 82.53 | 0.80 | . Haiti 7649 | 183 | 4982 | 2484 | 67.08 | 2.39 | . Finland 7623 | 333 | 6980 | 310 | 137.58 | 4.37 | . Paraguay 7519 | 86 | 5326 | 2107 | 105.42 | 1.14 | . Luxembourg 7242 | 122 | 6222 | 898 | 1156.91 | 1.68 | . Lebanon 7121 | 87 | 2377 | 4657 | 104.33 | 1.22 | . Albania 6676 | 205 | 3480 | 2991 | 231.98 | 3.07 | . Mauritania 6598 | 157 | 5704 | 737 | 141.90 | 2.38 | . Libya 6302 | 132 | 740 | 5430 | 91.71 | 2.09 | . Greece 5942 | 214 | 1347 | 4381 | 57.01 | 3.60 | . Croatia 5740 | 160 | 4962 | 618 | 139.82 | 2.79 | . Djibouti 5348 | 59 | 5133 | 156 | 541.29 | 1.10 | . Maldives 5223 | 20 | 2849 | 2354 | 966.25 | 0.38 | . Equatorial Guinea 4821 | 83 | 2182 | 2556 | 343.62 | 1.72 | . Zimbabwe 4818 | 104 | 1544 | 3170 | 32.42 | 2.16 | . Hungary 4768 | 605 | 3529 | 634 | 49.36 | 12.69 | . Malawi 4714 | 152 | 2477 | 2085 | 24.64 | 3.22 | . Central African Republic 4645 | 61 | 1723 | 2861 | 96.17 | 1.31 | . Nicaragua 4115 | 128 | 2913 | 1074 | 62.12 | 3.11 | . Montenegro 3748 | 71 | 2558 | 1119 | 596.76 | 1.89 | . Republic of the Congo 3745 | 60 | 1625 | 2060 | 67.87 | 1.60 | . Eswatini 3410 | 63 | 1720 | 1627 | 293.92 | 1.85 | . Thailand 3356 | 58 | 3169 | 129 | 4.81 | 1.73 | . Namibia 3229 | 19 | 715 | 2495 | 127.08 | 0.59 | . Somalia 3227 | 93 | 1728 | 1406 | 20.30 | 2.88 | . Cuba 3093 | 88 | 2472 | 533 | 27.31 | 2.85 | . Cabo Verde 2920 | 33 | 2148 | 739 | 525.19 | 1.13 | . Sri Lanka 2880 | 11 | 2638 | 231 | 13.45 | 0.38 | . Slovakia 2690 | 31 | 1884 | 775 | 49.27 | 1.15 | . Mali 2577 | 125 | 1973 | 479 | 12.73 | 4.85 | . Suriname 2559 | 39 | 1712 | 808 | 436.22 | 1.52 | . Mozambique 2481 | 17 | 910 | 1554 | 7.94 | 0.69 | . South Sudan 2472 | 47 | 1175 | 1250 | 22.08 | 1.90 | . Lithuania 2309 | 81 | 1683 | 545 | 84.82 | 3.51 | . Slovenia 2272 | 129 | 1960 | 183 | 109.29 | 5.68 | . Estonia 2174 | 63 | 1975 | 136 | 163.89 | 2.90 | . Rwanda 2171 | 7 | 1478 | 686 | 16.76 | 0.32 | . Guinea-Bissau 2088 | 29 | 1015 | 1044 | 106.10 | 1.39 | . Benin 2001 | 38 | 1681 | 282 | 16.51 | 1.90 | . Iceland 1968 | 10 | 1844 | 114 | 576.70 | 0.51 | . Sierra Leone 1932 | 69 | 1478 | 385 | 24.22 | 3.57 | . Yemen 1831 | 523 | 919 | 389 | 6.14 | 28.56 | . Tunisia 1738 | 52 | 1272 | 414 | 14.71 | 2.99 | . Angola 1735 | 80 | 575 | 1080 | 5.28 | 4.61 | . New Zealand 1570 | 22 | 1526 | 22 | 32.56 | 1.40 | . Uruguay 1385 | 37 | 1157 | 191 | 39.87 | 2.67 | . Gambia 1346 | 32 | 227 | 1087 | 55.70 | 2.38 | . Syria 1327 | 53 | 385 | 889 | 7.58 | 3.99 | . Uganda 1313 | 9 | 1138 | 166 | 2.87 | 0.69 | . Latvia 1303 | 32 | 1078 | 193 | 69.08 | 2.46 | . Jordan 1283 | 11 | 1189 | 83 | 12.57 | 0.86 | . Georgia 1278 | 17 | 1058 | 203 | 32.04 | 1.33 | . Cyprus 1277 | 20 | 870 | 387 | 105.77 | 1.57 | . Liberia 1250 | 81 | 736 | 433 | 24.71 | 6.48 | . Burkina Faso 1211 | 54 | 990 | 167 | 5.79 | 4.46 | . Niger 1158 | 69 | 1065 | 24 | 4.78 | 5.96 | . Malta 1141 | 9 | 692 | 440 | 258.41 | 0.79 | . Togo 1070 | 26 | 752 | 292 | 12.92 | 2.43 | . Botswana 1066 | 2 | 80 | 984 | 45.33 | 0.19 | . Jamaica 1047 | 14 | 753 | 280 | 35.36 | 1.34 | . Bahamas 989 | 15 | 116 | 858 | 251.50 | 1.52 | . Andorra 963 | 52 | 839 | 72 | 1246.36 | 5.40 | . Chad 946 | 76 | 859 | 11 | 5.76 | 8.03 | . Sao Tome and Principe 881 | 15 | 804 | 62 | 401.99 | 1.70 | . Vietnam 866 | 17 | 399 | 450 | 0.89 | 1.96 | . Lesotho 781 | 24 | 175 | 582 | 36.46 | 3.07 | . Diamond Princess 712 | 13 | 651 | 48 | 0.00 | 1.83 | . San Marino 699 | 42 | 657 | 0 | 2059.64 | 6.01 | . Guyana 602 | 22 | 189 | 391 | 76.54 | 3.65 | . Tanzania 509 | 21 | 183 | 305 | 0.85 | 4.13 | . Taiwan 480 | 7 | 443 | 30 | 2.02 | 1.46 | . Burundi 408 | 1 | 315 | 92 | 3.43 | 0.25 | . Comoros 399 | 7 | 379 | 13 | 45.88 | 1.75 | . Burma 360 | 6 | 313 | 41 | 0.66 | 1.67 | . Mauritius 344 | 10 | 334 | 0 | 27.05 | 2.91 | . Trinidad and Tobago 300 | 8 | 139 | 153 | 21.44 | 2.67 | . Mongolia 293 | 0 | 269 | 24 | 8.94 | 0.00 | . Eritrea 285 | 0 | 248 | 37 | 8.04 | 0.00 | . Cambodia 268 | 0 | 220 | 48 | 1.60 | 0.00 | . Papua New Guinea 214 | 3 | 71 | 140 | 2.39 | 1.40 | . Belize 177 | 2 | 32 | 143 | 44.51 | 1.13 | . Barbados 143 | 7 | 112 | 24 | 49.76 | 4.90 | . Brunei 142 | 3 | 138 | 1 | 32.46 | 2.11 | . Monaco 138 | 4 | 113 | 21 | 351.65 | 2.90 | . Seychelles 127 | 0 | 126 | 1 | 129.14 | 0.00 | . Bhutan 113 | 0 | 97 | 16 | 14.64 | 0.00 | . Antigua and Barbuda 92 | 3 | 76 | 13 | 93.95 | 3.26 | . Liechtenstein 89 | 1 | 87 | 1 | 233.37 | 1.12 | . Saint Vincent and the Grenadines 57 | 0 | 52 | 5 | 51.38 | 0.00 | . Fiji 27 | 1 | 18 | 8 | 3.01 | 3.70 | . Saint Lucia 25 | 0 | 25 | 0 | 13.61 | 0.00 | . Timor-Leste 25 | 0 | 24 | 1 | 1.90 | 0.00 | . Grenada 24 | 0 | 23 | 1 | 21.33 | 0.00 | . Laos 20 | 0 | 19 | 1 | 0.27 | 0.00 | . Dominica 18 | 0 | 18 | 0 | 25.00 | 0.00 | . Saint Kitts and Nevis 17 | 0 | 17 | 0 | 31.96 | 0.00 | . Holy See 12 | 0 | 12 | 0 | 1483.31 | 0.00 | . Western Sahara 10 | 1 | 8 | 1 | 1.67 | 10.00 | . MS Zaandam 9 | 2 | 0 | 0 | 0.00 | 22.22 | . #collapse-hide #data = pd.read_csv(&quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv&quot;, # error_bad_lines=False) data = df_deaths.copy() data = data.drop(columns=[&quot;Lat&quot;, &quot;Long&quot;]) data = data.melt(id_vars= [&quot;state&quot;, &quot;country&quot;, &quot;continent&quot;]) data = pd.DataFrame(data.groupby([&#39;country&#39;, &quot;variable&quot;]).sum()) data.reset_index(inplace=True) data = data.rename(columns={&quot;country&quot;: &quot;location&quot;, &quot;variable&quot;: &quot;date&quot;, &quot;value&quot;: &quot;total_cases&quot;}) data[&#39;date&#39;] = pd.to_datetime(data.date) data = data.sort_values(by = &quot;date&quot;) data.loc[data.location == &quot;US&quot;,&quot;location&quot;] = &quot;United States&quot; data.loc[data.location == &quot;Korea, South&quot;,&quot;location&quot;] = &quot;South Korea&quot; data.head() . . location date total_cases . 0 Afghanistan | 2020-01-22 | 0 | . 36946 Vietnam | 2020-01-22 | 0 | . 29232 San Marino | 2020-01-22 | 0 | . 1421 Armenia | 2020-01-22 | 0 | . 20300 Lithuania | 2020-01-22 | 0 | . #collapse-hide f = plt.figure(figsize=(10,5)) f.add_subplot(111) plt.axes(axisbelow=True) plt.barh(df_countries_cases.sort_values(&#39;Confirmed&#39;)[&quot;Confirmed&quot;].index[-10:],df_countries_cases.sort_values(&#39;Confirmed&#39;)[&quot;Confirmed&quot;].values[-10:],color=&quot;darkcyan&quot;) plt.tick_params(size=5,labelsize = 13) plt.xlabel(&quot;Confirmed Cases&quot;,fontsize=18) plt.title(&quot;Top 10 Countries (Confirmed Cases)&quot;,fontsize=20) plt.grid(alpha=0.3) #plt.savefig(out+&#39;Top 10 Countries (Confirmed Cases).png&#39;) . . #collapse-hide # Get data and clean it #data = pd.read_csv(&quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv&quot;, # error_bad_lines=False) data = df_confirmed.copy() data = data.drop(columns=[&quot;Lat&quot;, &quot;Long&quot;]) data = data.melt(id_vars= [&quot;state&quot;, &quot;country&quot;, &quot;continent&quot;]) data = pd.DataFrame(data.groupby([&#39;country&#39;, &quot;variable&quot;]).sum()) data.reset_index(inplace=True) data = data.rename(columns={&quot;country&quot;: &quot;location&quot;, &quot;variable&quot;: &quot;date&quot;, &quot;value&quot;: &quot;total_cases&quot;}) data[&#39;date&#39;] = pd.to_datetime(data.date) data = data.sort_values(by = &quot;date&quot;) data.loc[data.location == &quot;US&quot;,&quot;location&quot;] = &quot;United States&quot; data.loc[data.location == &quot;Korea, South&quot;,&quot;location&quot;] = &quot;South Korea&quot; # Population data (last year is 2017 which is what we use) data_pwt = pd.read_stata(&quot;https://www.rug.nl/ggdc/docs/pwt91.dta&quot;) filter1 = data_pwt[&quot;year&quot;] == 2017 data_pop = data_pwt[filter1] data_pop = data_pop[[&quot;country&quot;,&quot;pop&quot;]] data_pop.loc[data_pop.country == &quot;Republic of Korea&quot;,&quot;country&quot;] = &quot;South Korea&quot; data_pop.loc[data_pop.country == &quot;Iran (Islamic Republic of)&quot;,&quot;country&quot;] = &quot;Iran&quot; # per habitant data_pc = data.copy() # I can add more countries if needed countries = [&quot;China&quot;, &quot;Italy&quot;, &quot;Spain&quot;, &quot;France&quot;, &quot;United Kingdom&quot;, &quot;Germany&quot;, &quot;Portugal&quot;, &quot;United States&quot;, &quot;Singapore&quot;,&quot;South Korea&quot;, &quot;Japan&quot;, &quot;Brazil&quot;, &quot;Iran&quot;, &quot;Romania&quot;] data_countries = [] data_countries_pc = [] # compute per habitant for i in countries: data_pc.loc[data_pc.location == i,&quot;total_cases&quot;] = data_pc.loc[data_pc.location == i,&quot;total_cases&quot;]/float(data_pop.loc[data_pop.country == i, &quot;pop&quot;]) # get each country time series filter1 = data_pc[&quot;total_cases&quot;] &gt; 1 for i in countries: filter_country = data_pc[&quot;location&quot;]== i data_countries_pc.append(data_pc[filter_country &amp; filter1]) . . #collapse-hide # Stack data to get it to Altair dataframe format data_countries_pc2 = data_countries_pc.copy() for i in range(0,len(countries)): data_countries_pc2[i] = data_countries_pc2[i].reset_index() data_countries_pc2[i][&#39;n_days&#39;] = data_countries_pc2[i].index data_countries_pc2[i][&#39;log_cases&#39;] = np.log(data_countries_pc2[i][&quot;total_cases&quot;]) data_plot = data_countries_pc2[0] for i in range(1, len(countries)): data_plot = pd.concat([data_plot, data_countries_pc2[i]], axis=0) data_plot[&quot;trend_2days&quot;] = np.log(2)/2*data_plot[&quot;n_days&quot;] data_plot[&quot;trend_4days&quot;] = np.log(2)/4*data_plot[&quot;n_days&quot;] data_plot[&quot;trend_12days&quot;] = np.log(2)/12*data_plot[&quot;n_days&quot;] data_plot[&quot;trend_2days_label&quot;] = &quot;Doubles every 2 days&quot; data_plot[&quot;trend_4days_label&quot;] = &quot;Doubles evey 4 days&quot; data_plot[&quot;trend_12days_label&quot;] = &quot;Doubles every 12 days&quot; # Plot it using Altair source = data_plot scales = alt.selection_interval(bind=&#39;scales&#39;, zoom=False) selection = alt.selection_multi(fields=[&#39;location&#39;], bind=&#39;legend&#39;) base = alt.Chart(source, title = &quot;COVID-19 Confirmed Cases Per Million of Inhabitants&quot;).encode( x = alt.X(&#39;n_days:Q&#39;, title = &quot;Days passed since reaching 1 case per million&quot;), y = alt.Y(&quot;log_cases:Q&quot;,title = &quot;Log of confirmed cases per million&quot;), color = alt.Color(&#39;location:N&#39;, legend=alt.Legend(title=&quot;Country&quot;, labelFontSize=15, titleFontSize=17), scale=alt.Scale(scheme=&#39;tableau20&#39;)), opacity = alt.condition(selection, alt.value(1), alt.value(0.1)) ).properties( width=chart_width, height=chart_height ) lines = base.mark_line().add_selection( scales ).add_selection( selection ) trend_2d = alt.Chart(source).encode( x = &quot;n_days:Q&quot;, y = alt.Y(&quot;trend_2days:Q&quot;, scale=alt.Scale(domain=(0, max(data_plot[&quot;log_cases&quot;])))), ).mark_line( strokeDash=[3,3], color=&quot;grey&quot;) labels = pd.DataFrame([{&#39;label&#39;: &#39;Doubles every 2 days&#39;, &#39;x_coord&#39;: 13, &#39;y_coord&#39;: 8.3}, {&#39;label&#39;: &#39;Doubles every 4 days&#39;, &#39;x_coord&#39;: 37.5, &#39;y_coord&#39;: 8.3}, {&#39;label&#39;: &#39;Doubles every 12 days&#39;, &#39;x_coord&#39;: 71, &#39;y_coord&#39;: 3}, ]) trend_label = (alt.Chart(labels) .mark_text(align=&#39;left&#39;, dx=-55, dy=-15, fontSize=12, color=&quot;grey&quot;) .encode(x=&#39;x_coord:Q&#39;, y=&#39;y_coord:Q&#39;, text=&#39;label:N&#39;) ) trend_4d = alt.Chart(source).mark_line(color=&quot;grey&quot;, strokeDash=[3,3]).encode( x = &quot;n_days:Q&quot;, y = alt.Y(&quot;trend_4days:Q&quot;, scale=alt.Scale(domain=(0, max(data_plot[&quot;log_cases&quot;])))), ) trend_12d = alt.Chart(source).mark_line(color=&quot;grey&quot;, strokeDash=[3,3]).encode( x = &quot;n_days:Q&quot;, y = alt.Y(&quot;trend_12days:Q&quot;, scale=alt.Scale(domain=(0, max(data_plot[&quot;log_cases&quot;])))), ) ( (trend_2d + trend_4d + trend_12d + trend_label + lines) .configure_title(fontSize=20) .configure_axis(labelFontSize=15,titleFontSize=18) ) . . #collapse-hide data_pwt = pd.read_stata(&quot;https://www.rug.nl/ggdc/docs/pwt91.dta&quot;) filter1 = data_pwt[&quot;year&quot;] == 2017 data_pop = data_pwt[filter1] data_pop = data_pop[[&quot;country&quot;,&quot;pop&quot;]] data_pop.loc[data_pop.country == &quot;Republic of Korea&quot;,&quot;country&quot;] = &quot;South Korea&quot; data_pop.loc[data_pop.country == &quot;Iran (Islamic Republic of)&quot;,&quot;country&quot;] = &quot;Iran&quot; # per habitant data_pc = data.copy() countries = [&quot;Italy&quot;, &quot;Spain&quot;, &quot;France&quot;, &quot;United Kingdom&quot;, &quot;Germany&quot;, &quot;Portugal&quot;, &quot;United States&quot;, &quot;Singapore&quot;, &quot;South Korea&quot;, &quot;Japan&quot;, &quot;Brazil&quot;, &quot;Iran&quot;, &#39;Netherlands&#39;, &#39;Belgium&#39;, &#39;Sweden&#39;, &quot;Romania&quot;, &#39;Switzerland&#39;, &#39;Norway&#39;, &#39;Denmark&#39;, &#39;Austria&#39;, &#39;Slovenia&#39;, &#39;Greece&#39;] data_countries = [] data_countries_pc = [] # compute per habitant for i in countries: data_pc.loc[data_pc.location == i,&quot;total_cases&quot;] = data_pc.loc[data_pc.location == i,&quot;total_cases&quot;]/float(data_pop.loc[data_pop.country == i, &quot;pop&quot;]) # get each country time series filter1 = data_pc[&quot;total_cases&quot;] &gt; 1 for i in countries: filter_country = data_pc[&quot;location&quot;]== i data_countries_pc.append(data_pc[filter_country &amp; filter1]) . . #collapse-hide f = plt.figure(figsize=(10,5)) f.add_subplot(111) plt.axes(axisbelow=True) plt.barh(df_countries_cases.sort_values(&#39;Active&#39;)[&quot;Active&quot;].index[-10:],df_countries_cases.sort_values(&#39;Active&#39;)[&quot;Active&quot;].values[-10:],color=&quot;darkorange&quot;) plt.tick_params(size=5,labelsize = 13) plt.xlabel(&quot;Active Cases&quot;,fontsize=18) plt.title(&quot;Top 10 Countries (Active Cases)&quot;,fontsize=20) plt.grid(alpha=0.3,which=&#39;both&#39;) #plt.savefig(out+&#39;Top 10 Countries (Active Cases).png&#39;) . . #collapse-hide f = plt.figure(figsize=(10,5)) f.add_subplot(111) plt.axes(axisbelow=True) plt.barh(df_countries_cases.sort_values(&#39;Deaths&#39;)[&quot;Deaths&quot;].index[-10:],df_countries_cases.sort_values(&#39;Deaths&#39;)[&quot;Deaths&quot;].values[-10:],color=&quot;crimson&quot;) plt.tick_params(size=5,labelsize = 13) plt.xlabel(&quot;Deaths Cases&quot;,fontsize=18) plt.title(&quot;Top 10 Countries (Deaths Cases)&quot;,fontsize=20) plt.grid(alpha=0.3,which=&#39;both&#39;) #plt.savefig(out+&#39;Top 10 Countries (Deaths Cases).png&#39;) . . #collapse-hide # Stack data to get it to Altair dataframe format data_countries_pc2 = data_countries_pc.copy() for i in range(0,len(countries)): data_countries_pc2[i] = data_countries_pc2[i].reset_index() data_countries_pc2[i][&#39;n_days&#39;] = data_countries_pc2[i].index data_countries_pc2[i][&#39;log_cases&#39;] = np.log(data_countries_pc2[i][&quot;total_cases&quot;]) data_plot = data_countries_pc2[0] for i in range(1, len(countries)): data_plot = pd.concat([data_plot, data_countries_pc2[i]], axis=0) data_plot[&quot;trend_2days&quot;] = np.log(2)/2*data_plot[&quot;n_days&quot;] data_plot[&quot;trend_4days&quot;] = np.log(2)/4*data_plot[&quot;n_days&quot;] data_plot[&quot;trend_12days&quot;] = np.log(2)/12*data_plot[&quot;n_days&quot;] data_plot[&quot;trend_2days_label&quot;] = &quot;Doubles every 2 days&quot; data_plot[&quot;trend_4days_label&quot;] = &quot;Doubles evey 4 days&quot; data_plot[&quot;trend_12days_label&quot;] = &quot;Doubles every 12 days&quot; # Plot it using Altair source = data_plot scales = alt.selection_interval(bind=&#39;scales&#39;, zoom=False) selection = alt.selection_multi(fields=[&#39;location&#39;], bind=&#39;legend&#39;) base = alt.Chart(source, title = &quot;COVID-19 Deaths Per Million of Inhabitants&quot;).encode( x = alt.X(&#39;n_days:Q&#39;, title = &quot;Days passed since reaching 1 death per million&quot;), y = alt.Y(&quot;log_cases:Q&quot;,title = &quot;Log of deaths per million&quot;), color = alt.Color(&#39;location:N&#39;, legend=alt.Legend(title=&quot;Country&quot;, labelFontSize=15, titleFontSize=17), scale=alt.Scale(scheme=&#39;tableau20&#39;)), opacity = alt.condition(selection, alt.value(1), alt.value(0.1)) ) lines = base.mark_line().add_selection( scales ).add_selection( selection ).properties( width=chart_width, height=chart_height ) trend_2d = alt.Chart(source).encode( x = &quot;n_days:Q&quot;, y = alt.Y(&quot;trend_2days:Q&quot;, scale=alt.Scale(domain=(0, max(data_plot[&quot;log_cases&quot;])))), ).mark_line(color=&quot;grey&quot;, strokeDash=[3,3]) labels = pd.DataFrame([{&#39;label&#39;: &#39;Doubles every 2 days&#39;, &#39;x_coord&#39;: 11.4, &#39;y_coord&#39;: 6.5}, {&#39;label&#39;: &#39;Doubles every 4 days&#39;, &#39;x_coord&#39;: 30.5, &#39;y_coord&#39;: 6.5}, {&#39;label&#39;: &#39;Doubles every 12 days&#39;, &#39;x_coord&#39;: 46, &#39;y_coord&#39;: 3}, ]) trend_label = (alt.Chart(labels) .mark_text(align=&#39;left&#39;, dx=-55, dy=-15, fontSize=12, color=&quot;grey&quot;) .encode(x=&#39;x_coord:Q&#39;, y=&#39;y_coord:Q&#39;, text=&#39;label:N&#39;) ) trend_4d = alt.Chart(source).mark_line(color=&quot;grey&quot;, strokeDash=[3,3]).encode( x = &quot;n_days:Q&quot;, y = alt.Y(&quot;trend_4days:Q&quot;, scale=alt.Scale(domain=(0, max(data_plot[&quot;log_cases&quot;])))), ) trend_12d = alt.Chart(source).mark_line(color=&quot;grey&quot;, strokeDash=[3,3]).encode( x = &quot;n_days:Q&quot;, y = alt.Y(&quot;trend_12days:Q&quot;, scale=alt.Scale(domain=(0, max(data_plot[&quot;log_cases&quot;])))), ) plot1= ( (trend_2d + trend_4d + trend_12d + trend_label + lines) .configure_title(fontSize=20) .configure_axis(labelFontSize=15,titleFontSize=18) ) #plot1.save((&quot;../images/covid-permillion-trajectories.png&quot;)) plot1 . . #collapse-hide label = &#39;Deaths&#39; temp = pd.concat([x.copy() for x in data_countries_pc]).loc[lambda x: x.date &gt;= &#39;3/1/2020&#39;] metric_name = f&#39;{label} per Million&#39; temp.columns = [&#39;Country&#39;, &#39;date&#39;, metric_name] # temp.loc[:, &#39;month&#39;] = temp.date.dt.strftime(&#39;%Y-%m&#39;) temp.loc[:, f&#39;Log of {label} per Million&#39;] = temp[f&#39;{label} per Million&#39;].apply(lambda x: np.log(x)) temp.groupby(&#39;Country&#39;).last() . . date Deaths per Million Log of Deaths per Million . Country . Austria 2020-08-11 | 2546.519441 | 7.842483 | . Belgium 2020-08-11 | 6562.761184 | 8.789167 | . Brazil 2020-08-11 | 14608.892276 | 9.589386 | . Denmark 2020-08-11 | 2666.933621 | 7.888685 | . France 2020-08-11 | 3560.434324 | 8.177638 | . Germany 2020-08-11 | 2673.592716 | 7.891178 | . Greece 2020-08-11 | 532.448112 | 6.277485 | . Iran 2020-08-11 | 4080.552265 | 8.313988 | . Italy 2020-08-11 | 4232.436274 | 8.350533 | . Japan 2020-08-11 | 394.573609 | 5.977806 | . Netherlands 2020-08-11 | 3544.859054 | 8.173254 | . Norway 2020-08-11 | 1837.944522 | 7.516403 | . Portugal 2020-08-11 | 5125.608176 | 8.542004 | . Romania 2020-08-11 | 3240.053277 | 8.083345 | . Singapore 2020-08-11 | 9696.008195 | 9.179470 | . Slovenia 2020-08-11 | 1092.320253 | 6.996059 | . South Korea 2020-08-11 | 288.610466 | 5.665078 | . Spain 2020-08-11 | 7045.988298 | 8.860214 | . Sweden 2020-08-11 | 8387.499703 | 9.034498 | . Switzerland 2020-08-11 | 4352.876354 | 8.378592 | . United Kingdom 2020-08-11 | 4735.365427 | 8.462814 | . #collapse-hide f = plt.figure(figsize=(10,5)) f.add_subplot(111) plt.axes(axisbelow=True) plt.barh(df_countries_cases.sort_values(&#39;Recovered&#39;)[&quot;Recovered&quot;].index[-10:],df_countries_cases.sort_values(&#39;Recovered&#39;)[&quot;Recovered&quot;].values[-10:],color=&quot;limegreen&quot;) plt.tick_params(size=5,labelsize = 13) plt.xlabel(&quot;Recovered Cases&quot;,fontsize=18) plt.title(&quot;Top 10 Countries (Recovered Cases)&quot;,fontsize=20) plt.grid(alpha=0.3,which=&#39;both&#39;) #plt.savefig(out+&#39;Top 10 Countries (Recovered Cases).png&#39;) . . #collapse-hide def load_data(name): base_url=&#39;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series&#39; url = f&#39;{base_url}/time_series_covid19_{name}_global.csv&#39; df = pd.read_csv(url, index_col=[&#39;Country/Region&#39;, &#39;Province/State&#39;, &#39;Lat&#39;, &#39;Long&#39;]) df[&#39;type&#39;] = name.lower() df.columns.name = &#39;date&#39; df = (df.set_index(&#39;type&#39;, append=True) .reset_index([&#39;Lat&#39;, &#39;Long&#39;], drop=True) .stack() .reset_index() .set_index(&#39;date&#39;) ) df.index = pd.to_datetime(df.index) df.columns = [&#39;country&#39;, &#39;state&#39;, &#39;type&#39;, &#39;cases&#39;] # Move HK to country level df.loc[df.state ==&#39;Hong Kong&#39;, &#39;country&#39;] = &#39;Hong Kong&#39; df.loc[df.state ==&#39;Hong Kong&#39;, &#39;state&#39;] = np.nan # Aggregate large countries split by states df = pd.concat([df, (df.loc[~df.state.isna()] .groupby([&#39;country&#39;, &#39;date&#39;, &#39;type&#39;]) .sum() .rename(index=lambda x: x+&#39; (total)&#39;, level=0) .reset_index(level=[&#39;country&#39;, &#39;type&#39;])) ]) return df . . #collapse-hide df_confirmed_1 = load_data(&#39;confirmed&#39;) df_deaths_1 = load_data(&#39;deaths&#39;) df_recovered_1 = load_data(&#39;recovered&#39;) # clean the data df_confirmed_new = df_confirmed_1[~df_confirmed_1[&#39;country&#39;].str.contains(&#39; (total )&#39;)].drop([&#39;state&#39;], axis=1, ).reset_index() df_deaths_new = df_deaths_1[~df_deaths_1[&#39;country&#39;].str.contains(&#39; (total )&#39;)].drop([&#39;state&#39;], axis=1, ).reset_index() df_recovered_new = df_recovered_1[~df_recovered_1[&#39;country&#39;].str.contains(&#39; (total )&#39;)].drop([&#39;state&#39;], axis=1, ).reset_index() # get the data only for the latest date Latest_Date = df_confirmed_new[&#39;date&#39;].max() df_confirmed_new = df_confirmed_new.loc[df_confirmed_new[&#39;date&#39;] == Latest_Date] df_deaths_new = df_deaths_new.loc[df_deaths_new[&#39;date&#39;] == Latest_Date] df_recovered_new = df_recovered_new.loc[df_recovered_new[&#39;date&#39;] == Latest_Date] # remove column &#39;date&#39; as it is no more required df_confirmed_new = df_confirmed_new.drop(&#39;date&#39;, axis=1) df_deaths_new = df_deaths_new.drop(&#39;date&#39;, axis=1) df_recovered_new = df_recovered_new.drop(&#39;date&#39;, axis=1) # aggregate data df_confirmed_new = (df_confirmed_new.sort_values(by=[&#39;country&#39;]) .groupby([&#39;country&#39;]) .agg(sum)).reset_index() df_deaths_new = (df_deaths_new.sort_values(by=[&#39;country&#39;]) .groupby([&#39;country&#39;]) .agg(sum)).reset_index() df_recovered_new = (df_recovered_new.sort_values(by=[&#39;country&#39;]) .groupby([&#39;country&#39;]) .agg(sum)).reset_index() # rename the column for &#39;cases&#39; in respective datasets df_confirmed_new = df_confirmed_new.rename(columns={&quot;cases&quot;: &quot;infections&quot;}) df_deaths_new = df_deaths_new.rename(columns={&quot;cases&quot;: &quot;deaths&quot;}) df_recovered_new = df_recovered_new.rename(columns={&quot;cases&quot;: &quot;recovered&quot;}) # (inner)join the datasets for &#39;confirmed&#39; and &#39;death&#39; on &#39;country&#39; df_Master = pd.merge(df_confirmed_new, df_deaths_new, how=&#39;inner&#39;, on=&#39;country&#39;, left_on=None, right_on=None, left_index=False, right_index=False, sort=True) df_Master = pd.merge(df_Master, df_recovered_new, how=&#39;inner&#39;, on=&#39;country&#39;, left_on=None, right_on=None, left_index=False, right_index=False, sort=True) # rename the Countries df_Master[&#39;country&#39;] = df_Master[&#39;country&#39;].replace({&#39;Bosnia and Herzegovina&#39;:&#39;Bosnia Herzegovina&#39;, &#39;Timor-Leste&#39; :&#39;East Timor&#39;, &quot;Cote d&#39;Ivoire&quot; :&#39;Ivory Coast&#39;, &#39;Burma&#39; :&#39;Myanmar&#39;, &#39;Korea, South&#39; :&#39;South Korea&#39;, &#39;Taiwan*&#39; :&#39;Taiwan&#39;, &#39;US&#39; :&#39;United States of America&#39;, &#39;Holy See&#39; :&#39;Vatican City&#39;}) ## remove the countries that have less than 200 confirmed cases case_threshold = 200 keep_countries = df_Master.loc[(df_Master[&#39;infections&#39;] &gt; case_threshold)].country df_Master = df_Master.loc[df_Master[&#39;country&#39;].isin(keep_countries)] # calculate &#39;deaths&#39; and &#39;recovery&#39; per 1000 infections df_Master[&#39;Deaths_per_1000&#39;] = round(1000 * (df_Master[&#39;deaths&#39;]/df_Master[&#39;infections&#39;]), 2) df_Master[&#39;Recovered_per_1000&#39;] = round(1000 * (df_Master[&#39;recovered&#39;]/df_Master[&#39;infections&#39;]), 2) # get countries with top 50 death rates df_top_death = df_Master.sort_values(by=[&#39;Deaths_per_1000&#39;], ascending=False) df_top_death = df_top_death.head(50) # get countries with top 50 recovery rates df_top_recovered = df_Master.sort_values(by=[&#39;Recovered_per_1000&#39;], ascending=False) df_top_recovered = df_top_recovered.head(50) # get rest of the countries df_ROW = df_Master.loc[~df_Master[&#39;country&#39;].isin(df_top_death.country)] df_ROW = df_ROW.loc[~df_ROW[&#39;country&#39;].isin(df_top_recovered.country)] . . This graph shows the 50 countries that are facing highest rate of deaths per 1000 infections, across the world. As it is not so intuitive that the developed countries such as Belgium, France, Netherlands are among the top countries having highest death rate. . #collapse-hide # make the bar-chart for countries on &quot;deaths per 1000 infections&quot; alt.Chart(df_top_death).mark_bar(color=&#39;Orange&#39;).encode( x= alt.Y(&#39;country:N&#39;, sort=&#39;-y&#39;, title=&quot;Countries&quot;), y=alt.Y(&#39;Deaths_per_1000&#39;, title=&quot;Deaths per 1000 infected people&quot;) ).properties( title=&#39;Countries with top death rates&#39;) . . Further, we move on to the countries with best recovery rate. The graph below shows 50 countries with highest rate of recovery. . #collapse-hide # make the bar-chart for countries on &quot;recovery per 1000 infections&quot; alt.Chart(df_top_recovered).mark_bar(color=&#39;#00CC66&#39;).encode( x= alt.Y(&#39;country:N&#39;, sort=&#39;-y&#39;, title=&quot;Countries&quot;), y=alt.Y(&#39;Recovered_per_1000&#39;, title=&quot;Recovered per 1000 infected people&quot;) ).properties( title=&#39;Countries with top recovery rates&#39;) . . Finally we project the data from above graphs on to a scatter plot. The Orange and Green bubbles are from the above two bar charts. Additionally, the bubbles in Grey color are the rest of the countries. . #collapse-hide # make the scatter plot for &quot;Death Rates by Population Density&quot; #00CC66 chart_high_recovery = alt.Chart(df_top_recovered).mark_circle(size=150, color=&#39;Red&#39;).encode( x=alt.Y(&#39;Recovered_per_1000&#39;, title=&quot;Recovery per 1000 infections&quot;), y=alt.Y(&#39;Deaths_per_1000&#39;, title=&quot;Deaths per 1000 infections&quot;), tooltip=[&#39;country&#39;, &#39;Recovered_per_1000&#39;, &#39;Deaths_per_1000&#39;] ).properties( width=700, height=450) chart_high_death = alt.Chart(df_top_death).mark_circle(size=150, color=&#39;Orange&#39;).encode( x=alt.Y(&#39;Recovered_per_1000&#39;, title=&quot;Recovery per 1000 infections&quot;), y=alt.Y(&#39;Deaths_per_1000&#39;, title=&quot;Deaths per 1000 infections&quot;), tooltip=[&#39;country&#39;, &#39;Recovered_per_1000&#39;, &#39;Deaths_per_1000&#39;] ).properties( width=700, height=450) chart_rest = alt.Chart(df_ROW).mark_circle(size=150, color=&#39;#C3C3C3&#39;).encode( x=alt.Y(&#39;Recovered_per_1000&#39;), y=alt.Y(&#39;Deaths_per_1000&#39;), tooltip=[&#39;country&#39;, &#39;Recovered_per_1000&#39;, &#39;Deaths_per_1000&#39;] ).properties( width=700, height=450) (chart_high_recovery + chart_high_death + chart_rest).interactive() . .",
            "url": "https://skelwadkar.github.io/Covid19_dashboard/2020/08/09/dashboard-covid19.html",
            "relUrl": "/2020/08/09/dashboard-covid19.html",
            "date": " • Aug 9, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://skelwadkar.github.io/Covid19_dashboard/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://skelwadkar.github.io/Covid19_dashboard/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}
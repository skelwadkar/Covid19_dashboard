{
  
    
        "post0": {
            "title": "Data Analysis for Covid19 JHU data",
            "content": "#collapse-hide import altair as alt import os import numpy as np import pandas as pd import matplotlib from IPython.display import display, Markdown from collections import defaultdict from datetime import datetime, timedelta, date import scipy as sci from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.cluster import KMeans import pycountry_convert as pc import folium import branca from scipy.interpolate import make_interp_spline, BSpline import plotly.express as px import json, requests from keras.layers import Input, Dense, Activation, LeakyReLU, Dropout from keras import models from keras.optimizers import RMSprop, Adam from folium import plugins from IPython.display import HTML import warnings warnings.filterwarnings(&#39;ignore&#39;) import matplotlib.pyplot as plt import seaborn as sns from matplotlib import ticker import calmap %config InlineBackend.figure_format = &#39;retina&#39; chart_width = 550 chart_height= 400 . . Using TensorFlow backend. . #collapse-hide df_confirmed = pd.read_csv(&#39;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv&#39;) df_deaths = pd.read_csv(&#39;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv&#39;) df_recovered = pd.read_csv(&#39;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv&#39;) df_covid19 = pd.read_csv(&quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/web-data/data/cases_country.csv&quot;) df_table = pd.read_csv(&quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/web-data/data/cases_time.csv&quot;,parse_dates=[&#39;Last_Update&#39;]) . . #collapse-hide df_covid19 = df_covid19.drop([&quot;People_Tested&quot;,&quot;People_Hospitalized&quot;,&quot;UID&quot;,&quot;ISO3&quot;,&quot;Mortality_Rate&quot;],axis =1) df_confirmed = df_confirmed.rename(columns={&quot;Province/State&quot;:&quot;state&quot;,&quot;Country/Region&quot;: &quot;country&quot;}) df_deaths = df_deaths.rename(columns={&quot;Province/State&quot;:&quot;state&quot;,&quot;Country/Region&quot;: &quot;country&quot;}) df_covid19 = df_covid19.rename(columns={&quot;Country_Region&quot;: &quot;country&quot;}) df_covid19[&quot;Active&quot;] = df_covid19[&quot;Confirmed&quot;]-df_covid19[&quot;Recovered&quot;]-df_covid19[&quot;Deaths&quot;] # Changing the conuntry names as required by pycountry_convert Lib df_confirmed.loc[df_confirmed[&#39;country&#39;] == &quot;US&quot;, &quot;country&quot;] = &quot;USA&quot; df_deaths.loc[df_deaths[&#39;country&#39;] == &quot;US&quot;, &quot;country&quot;] = &quot;USA&quot; df_covid19.loc[df_covid19[&#39;country&#39;] == &quot;US&quot;, &quot;country&quot;] = &quot;USA&quot; df_table.loc[df_table[&#39;Country_Region&#39;] == &quot;US&quot;, &quot;Country_Region&quot;] = &quot;USA&quot; # df_recovered.loc[df_recovered[&#39;country&#39;] == &quot;US&quot;, &quot;country&quot;] = &quot;USA&quot; df_confirmed.loc[df_confirmed[&#39;country&#39;] == &#39;Korea, South&#39;, &quot;country&quot;] = &#39;South Korea&#39; df_deaths.loc[df_deaths[&#39;country&#39;] == &#39;Korea, South&#39;, &quot;country&quot;] = &#39;South Korea&#39; df_covid19.loc[df_covid19[&#39;country&#39;] == &quot;Korea, South&quot;, &quot;country&quot;] = &quot;South Korea&quot; df_table.loc[df_table[&#39;Country_Region&#39;] == &quot;Korea, South&quot;, &quot;Country_Region&quot;] = &quot;South Korea&quot; # df_recovered.loc[df_recovered[&#39;country&#39;] == &#39;Korea, South&#39;, &quot;country&quot;] = &#39;South Korea&#39; df_confirmed.loc[df_confirmed[&#39;country&#39;] == &#39;Taiwan*&#39;, &quot;country&quot;] = &#39;Taiwan&#39; df_deaths.loc[df_deaths[&#39;country&#39;] == &#39;Taiwan*&#39;, &quot;country&quot;] = &#39;Taiwan&#39; df_covid19.loc[df_covid19[&#39;country&#39;] == &quot;Taiwan*&quot;, &quot;country&quot;] = &quot;Taiwan&quot; df_table.loc[df_table[&#39;Country_Region&#39;] == &quot;Taiwan*&quot;, &quot;Country_Region&quot;] = &quot;Taiwan&quot; # df_recovered.loc[df_recovered[&#39;country&#39;] == &#39;Taiwan*&#39;, &quot;country&quot;] = &#39;Taiwan&#39; df_confirmed.loc[df_confirmed[&#39;country&#39;] == &#39;Congo (Kinshasa)&#39;, &quot;country&quot;] = &#39;Democratic Republic of the Congo&#39; df_deaths.loc[df_deaths[&#39;country&#39;] == &#39;Congo (Kinshasa)&#39;, &quot;country&quot;] = &#39;Democratic Republic of the Congo&#39; df_covid19.loc[df_covid19[&#39;country&#39;] == &quot;Congo (Kinshasa)&quot;, &quot;country&quot;] = &quot;Democratic Republic of the Congo&quot; df_table.loc[df_table[&#39;Country_Region&#39;] == &quot;Congo (Kinshasa)&quot;, &quot;Country_Region&quot;] = &quot;Democratic Republic of the Congo&quot; # df_recovered.loc[df_recovered[&#39;country&#39;] == &#39;Congo (Kinshasa)&#39;, &quot;country&quot;] = &#39;Democratic Republic of the Congo&#39; df_confirmed.loc[df_confirmed[&#39;country&#39;] == &quot;Cote d&#39;Ivoire&quot;, &quot;country&quot;] = &quot;Côte d&#39;Ivoire&quot; df_deaths.loc[df_deaths[&#39;country&#39;] == &quot;Cote d&#39;Ivoire&quot;, &quot;country&quot;] = &quot;Côte d&#39;Ivoire&quot; df_covid19.loc[df_covid19[&#39;country&#39;] == &quot;Cote d&#39;Ivoire&quot;, &quot;country&quot;] = &quot;Côte d&#39;Ivoire&quot; df_table.loc[df_table[&#39;Country_Region&#39;] == &quot;Cote d&#39;Ivoire&quot;, &quot;Country_Region&quot;] = &quot;Côte d&#39;Ivoire&quot; # df_recovered.loc[df_recovered[&#39;country&#39;] == &quot;Cote d&#39;Ivoire&quot;, &quot;country&quot;] = &quot;Côte d&#39;Ivoire&quot; df_confirmed.loc[df_confirmed[&#39;country&#39;] == &quot;Reunion&quot;, &quot;country&quot;] = &quot;Réunion&quot; df_deaths.loc[df_deaths[&#39;country&#39;] == &quot;Reunion&quot;, &quot;country&quot;] = &quot;Réunion&quot; df_covid19.loc[df_covid19[&#39;country&#39;] == &quot;Reunion&quot;, &quot;country&quot;] = &quot;Réunion&quot; df_table.loc[df_table[&#39;Country_Region&#39;] == &quot;Reunion&quot;, &quot;Country_Region&quot;] = &quot;Réunion&quot; # df_recovered.loc[df_recovered[&#39;country&#39;] == &quot;Reunion&quot;, &quot;country&quot;] = &quot;Réunion&quot; df_confirmed.loc[df_confirmed[&#39;country&#39;] == &#39;Congo (Brazzaville)&#39;, &quot;country&quot;] = &#39;Republic of the Congo&#39; df_deaths.loc[df_deaths[&#39;country&#39;] == &#39;Congo (Brazzaville)&#39;, &quot;country&quot;] = &#39;Republic of the Congo&#39; df_covid19.loc[df_covid19[&#39;country&#39;] == &quot;Congo (Brazzaville)&quot;, &quot;country&quot;] = &quot;Republic of the Congo&quot; df_table.loc[df_table[&#39;Country_Region&#39;] == &quot;Congo (Brazzaville)&quot;, &quot;Country_Region&quot;] = &quot;Republic of the Congo&quot; # df_recovered.loc[df_recovered[&#39;country&#39;] == &#39;Congo (Brazzaville)&#39;, &quot;country&quot;] = &#39;Republic of the Congo&#39; df_confirmed.loc[df_confirmed[&#39;country&#39;] == &#39;Bahamas, The&#39;, &quot;country&quot;] = &#39;Bahamas&#39; df_deaths.loc[df_deaths[&#39;country&#39;] == &#39;Bahamas, The&#39;, &quot;country&quot;] = &#39;Bahamas&#39; df_covid19.loc[df_covid19[&#39;country&#39;] == &quot;Bahamas, The&quot;, &quot;country&quot;] = &quot;Bahamas&quot; df_table.loc[df_table[&#39;Country_Region&#39;] == &quot;Bahamas, The&quot;, &quot;Country_Region&quot;] = &quot;Bahamas&quot; # df_recovered.loc[df_recovered[&#39;country&#39;] == &#39;Bahamas, The&#39;, &quot;country&quot;] = &#39;Bahamas&#39; df_confirmed.loc[df_confirmed[&#39;country&#39;] == &#39;Gambia, The&#39;, &quot;country&quot;] = &#39;Gambia&#39; df_deaths.loc[df_deaths[&#39;country&#39;] == &#39;Gambia, The&#39;, &quot;country&quot;] = &#39;Gambia&#39; df_covid19.loc[df_covid19[&#39;country&#39;] == &quot;Gambia, The&quot;, &quot;country&quot;] = &quot;Gambia&quot; df_table.loc[df_table[&#39;Country_Region&#39;] == &quot;Gambia&quot;, &quot;Country_Region&quot;] = &quot;Gambia&quot; # df_recovered.loc[df_recovered[&#39;country&#39;] == &#39;Gambia, The&#39;, &quot;country&quot;] = &#39;Gambia&#39; . . #collapse-hide # getting all countries countries = np.asarray(df_confirmed[&quot;country&quot;]) countries1 = np.asarray(df_covid19[&quot;country&quot;]) # Continent_code to Continent_names continents = { &#39;NA&#39;: &#39;North America&#39;, &#39;SA&#39;: &#39;South America&#39;, &#39;AS&#39;: &#39;Asia&#39;, &#39;OC&#39;: &#39;Australia&#39;, &#39;AF&#39;: &#39;Africa&#39;, &#39;EU&#39; : &#39;Europe&#39;, &#39;na&#39; : &#39;Others&#39; } # Defininng Function for getting continent code for country. def country_to_continent_code(country): try: return pc.country_alpha2_to_continent_code(pc.country_name_to_country_alpha2(country)) except : return &#39;na&#39; #Collecting Continent Information df_confirmed.insert(2,&quot;continent&quot;, [continents[country_to_continent_code(country)] for country in countries[:]]) df_deaths.insert(2,&quot;continent&quot;, [continents[country_to_continent_code(country)] for country in countries[:]]) df_covid19.insert(1,&quot;continent&quot;, [continents[country_to_continent_code(country)] for country in countries1[:]]) df_table.insert(1,&quot;continent&quot;, [continents[country_to_continent_code(country)] for country in df_table[&quot;Country_Region&quot;].values]) . . #collapse-hide df_table = df_table[df_table[&quot;continent&quot;] != &quot;Others&quot;] df_confirmed = df_confirmed.replace(np.nan, &#39;&#39;, regex=True) df_deaths = df_deaths.replace(np.nan, &#39;&#39;, regex=True) . . #collapse-hide df_countries_cases = df_covid19.copy().drop([&#39;Lat&#39;,&#39;Long_&#39;,&#39;continent&#39;,&#39;Last_Update&#39;],axis =1) df_countries_cases.index = df_countries_cases[&quot;country&quot;] df_countries_cases = df_countries_cases.drop([&#39;country&#39;],axis=1) df_continents_cases = df_covid19.copy().drop([&#39;Lat&#39;,&#39;Long_&#39;,&#39;country&#39;,&#39;Last_Update&#39;],axis =1) df_continents_cases = df_continents_cases.groupby([&quot;continent&quot;]).sum() df_countries_cases.fillna(0,inplace=True) df_continents_cases.fillna(0,inplace=True) . . #collapse-hide df_t = pd.DataFrame(pd.to_numeric(df_countries_cases.sum()),dtype=np.float64).transpose() df_t[&quot;Mortality Rate (per 100)&quot;] = np.round(100*df_t[&quot;Deaths&quot;]/df_t[&quot;Confirmed&quot;],2) df_t.style.background_gradient(cmap=&#39;Wistia&#39;,axis=1).format(&quot;{:.2f}&quot;).format(&quot;{:.0f}&quot;,subset=[&quot;Confirmed&quot;,&quot;Deaths&quot;,&quot;Recovered&quot;,&quot;Active&quot;]) . . Confirmed Deaths Recovered Active Incident_Rate Mortality Rate (per 100) . 0 20295343 | 741423 | 12592114 | 6856598 | 61500.08 | 3.65 | . #collapse-hide df_continents_cases[&quot;Mortality Rate (per 100)&quot;] = np.round(100*df_continents_cases[&quot;Deaths&quot;]/df_continents_cases[&quot;Confirmed&quot;],2) df_continents_cases.style.background_gradient(cmap=&#39;Blues&#39;,subset=[&quot;Confirmed&quot;]) .background_gradient(cmap=&#39;Reds&#39;,subset=[&quot;Deaths&quot;]) .background_gradient(cmap=&#39;Greens&#39;,subset=[&quot;Recovered&quot;]) .background_gradient(cmap=&#39;Purples&#39;,subset=[&quot;Active&quot;]) .background_gradient(cmap=&#39;Pastel1_r&#39;,subset=[&quot;Incident_Rate&quot;]) .background_gradient(cmap=&#39;YlOrBr&#39;,subset=[&quot;Mortality Rate (per 100)&quot;]) .format(&quot;{:.2f}&quot;) .format(&quot;{:.0f}&quot;,subset=[&quot;Confirmed&quot;,&quot;Deaths&quot;,&quot;Recovered&quot;,&quot;Active&quot;]) . . Confirmed Deaths Recovered Active Incident_Rate Mortality Rate (per 100) . continent . Africa 1061880 | 23804 | 756445 | 281631 | 5255.89 | 2.24 | . Asia 5197692 | 112413 | 3953190 | 1132089 | 19670.71 | 2.16 | . Australia 23938 | 378 | 14394 | 9166 | 124.87 | 1.58 | . Europe 3062325 | 206167 | 1764439 | 986518 | 17638.53 | 6.73 | . North America 6083569 | 235558 | 2399879 | 3448132 | 7206.44 | 3.87 | . Others 41915 | 1059 | 25215 | 15634 | 3228.54 | 2.53 | . South America 4824024 | 162044 | 3678552 | 983428 | 8375.10 | 3.36 | . #collapse-hide df_countries_cases[&quot;Mortality Rate (per 100)&quot;] = np.round(100*df_countries_cases[&quot;Deaths&quot;]/df_countries_cases[&quot;Confirmed&quot;],2) df_countries_cases.sort_values(&#39;Confirmed&#39;, ascending= False).style.background_gradient(cmap=&#39;Blues&#39;,subset=[&quot;Confirmed&quot;]) .background_gradient(cmap=&#39;Reds&#39;,subset=[&quot;Deaths&quot;]) .background_gradient(cmap=&#39;Greens&#39;,subset=[&quot;Recovered&quot;]) .background_gradient(cmap=&#39;Purples&#39;,subset=[&quot;Active&quot;]) .background_gradient(cmap=&#39;Pastel1_r&#39;,subset=[&quot;Incident_Rate&quot;]) .background_gradient(cmap=&#39;YlOrBr&#39;,subset=[&quot;Mortality Rate (per 100)&quot;]) .format(&quot;{:.2f}&quot;) .format(&quot;{:.0f}&quot;,subset=[&quot;Confirmed&quot;,&quot;Deaths&quot;,&quot;Recovered&quot;,&quot;Active&quot;]) . . Confirmed Deaths Recovered Active Incident_Rate Mortality Rate (per 100) . country . USA 5141208 | 164537 | 1714960 | 3261711 | 1560.47 | 3.20 | . Brazil 3057470 | 101752 | 2449338 | 506380 | 1438.41 | 3.33 | . India 2329638 | 46091 | 1639599 | 643948 | 168.81 | 1.98 | . Russia 895691 | 15103 | 701796 | 178792 | 613.76 | 1.69 | . South Africa 566109 | 10751 | 426125 | 129233 | 954.51 | 1.90 | . Mexico 492522 | 53929 | 397278 | 41315 | 385.41 | 10.95 | . Peru 489680 | 21501 | 329404 | 138775 | 1485.15 | 4.39 | . Colombia 410453 | 13475 | 230427 | 166551 | 806.66 | 3.28 | . Chile 376616 | 10178 | 349541 | 16897 | 1970.14 | 2.70 | . Iran 331189 | 18800 | 288620 | 23769 | 394.31 | 5.68 | . Spain 326612 | 28581 | 150376 | 147655 | 698.56 | 8.75 | . United Kingdom 313402 | 46611 | 1465 | 265326 | 461.66 | 14.87 | . Saudi Arabia 291468 | 3233 | 255118 | 33117 | 837.22 | 1.11 | . Pakistan 285921 | 6129 | 263193 | 16599 | 129.44 | 2.14 | . Bangladesh 263503 | 3471 | 151972 | 108060 | 160.00 | 1.32 | . Argentina 260911 | 5004 | 181389 | 74518 | 577.29 | 1.92 | . Italy 251237 | 35215 | 202461 | 13561 | 415.53 | 14.02 | . Turkey 243180 | 5873 | 226155 | 11152 | 288.34 | 2.42 | . France 239355 | 30328 | 82971 | 126056 | 366.70 | 12.67 | . Germany 219540 | 9213 | 198832 | 11495 | 262.03 | 4.20 | . Iraq 156995 | 5531 | 112102 | 39362 | 390.32 | 3.52 | . Philippines 139538 | 2312 | 68432 | 68794 | 127.34 | 1.66 | . Indonesia 128776 | 5824 | 83710 | 39242 | 47.08 | 4.52 | . Canada 122389 | 9038 | 108465 | 4886 | 323.30 | 7.38 | . Qatar 113646 | 188 | 110324 | 3134 | 3944.59 | 0.17 | . Kazakhstan 100855 | 1269 | 74677 | 24909 | 537.13 | 1.26 | . Egypt 95834 | 5059 | 54888 | 35887 | 93.65 | 5.28 | . Ecuador 95563 | 5951 | 78610 | 11002 | 541.65 | 6.23 | . Bolivia 93328 | 3761 | 31753 | 57814 | 799.52 | 4.03 | . China 88958 | 4693 | 82440 | 1825 | 6.33 | 5.28 | . Israel 86959 | 622 | 61576 | 24761 | 1004.66 | 0.72 | . Ukraine 86456 | 1998 | 47065 | 37393 | 197.69 | 2.31 | . Sweden 83126 | 5770 | 0 | 0 | 823.09 | 6.94 | . Oman 82050 | 533 | 76720 | 4797 | 1606.74 | 0.65 | . Dominican Republic 81094 | 1346 | 45666 | 34082 | 747.55 | 1.66 | . Panama 76464 | 1680 | 50665 | 24119 | 1772.15 | 2.20 | . Belgium 75008 | 9885 | 17841 | 47282 | 647.20 | 13.18 | . Kuwait 73068 | 486 | 64759 | 7823 | 1710.97 | 0.67 | . Belarus 69005 | 592 | 65219 | 3194 | 730.26 | 0.86 | . Romania 63762 | 2764 | 30585 | 30413 | 331.44 | 4.33 | . United Arab Emirates 62966 | 358 | 56961 | 5647 | 636.64 | 0.57 | . Netherlands 60954 | 6180 | 253 | 54521 | 355.73 | 10.14 | . Guatemala 57966 | 2233 | 46442 | 9291 | 323.55 | 3.85 | . Singapore 55353 | 27 | 50128 | 5198 | 946.15 | 0.05 | . Poland 52961 | 1821 | 37150 | 13990 | 139.94 | 3.44 | . Portugal 52945 | 1761 | 38760 | 12424 | 519.24 | 3.33 | . Japan 50587 | 1058 | 34136 | 15393 | 40.00 | 2.09 | . Honduras 48403 | 1515 | 6805 | 40083 | 488.69 | 3.13 | . Nigeria 47290 | 956 | 33609 | 12725 | 22.94 | 2.02 | . Bahrain 44804 | 165 | 41504 | 3135 | 2633.08 | 0.37 | . Ghana 41404 | 215 | 39055 | 2134 | 133.25 | 0.52 | . Armenia 40794 | 806 | 33492 | 6496 | 1376.67 | 1.98 | . Kyrgyzstan 40759 | 1484 | 32997 | 6278 | 624.74 | 3.64 | . Afghanistan 37345 | 1354 | 26694 | 9297 | 95.93 | 3.63 | . Switzerland 36895 | 1990 | 32700 | 2205 | 426.30 | 5.39 | . Algeria 36204 | 1322 | 25263 | 9619 | 82.56 | 3.65 | . Morocco 35195 | 533 | 25385 | 9277 | 95.35 | 1.51 | . Azerbaijan 33731 | 495 | 30856 | 2380 | 332.68 | 1.47 | . Uzbekistan 32215 | 208 | 24090 | 7917 | 96.25 | 0.65 | . Serbia 28497 | 652 | 0 | 0 | 326.15 | 2.29 | . Moldova 28223 | 857 | 19740 | 7626 | 699.63 | 3.04 | . Venezuela 27938 | 238 | 19706 | 7994 | 98.25 | 0.85 | . Kenya 27425 | 438 | 13867 | 13120 | 51.00 | 1.60 | . Ireland 26801 | 1773 | 23364 | 1664 | 542.77 | 6.62 | . Costa Rica 24508 | 255 | 7971 | 16282 | 481.10 | 1.04 | . Ethiopia 24175 | 440 | 10696 | 13039 | 21.03 | 1.82 | . Nepal 23948 | 83 | 16664 | 7201 | 82.19 | 0.35 | . Austria 22245 | 723 | 20123 | 1399 | 246.99 | 3.25 | . Australia 22127 | 352 | 12779 | 8996 | 86.91 | 1.59 | . El Salvador 21269 | 577 | 9897 | 10795 | 327.91 | 2.71 | . Czechia 18783 | 391 | 13222 | 5170 | 175.39 | 2.08 | . Cameroon 18213 | 398 | 15320 | 2495 | 68.61 | 2.19 | . Côte d&#39;Ivoire 16847 | 105 | 13321 | 3421 | 63.87 | 0.62 | . Denmark 15291 | 621 | 13227 | 1443 | 263.99 | 4.06 | . West Bank and Gaza 14875 | 104 | 8181 | 6590 | 291.59 | 0.70 | . South Korea 14714 | 305 | 13786 | 623 | 28.70 | 2.07 | . Bosnia and Herzegovina 14708 | 447 | 8411 | 5850 | 448.30 | 3.04 | . Bulgaria 13722 | 471 | 8154 | 5097 | 197.48 | 3.43 | . Madagascar 13317 | 152 | 11276 | 1889 | 48.09 | 1.14 | . North Macedonia 12083 | 529 | 8248 | 3306 | 579.97 | 4.38 | . Sudan 12033 | 786 | 6282 | 4965 | 27.44 | 6.53 | . Senegal 11380 | 238 | 7449 | 3693 | 67.96 | 2.09 | . Kosovo 10419 | 341 | 6058 | 4020 | 575.52 | 3.27 | . Norway 9751 | 256 | 8857 | 638 | 179.87 | 2.63 | . Democratic Republic of the Congo 9499 | 225 | 8375 | 899 | 10.61 | 2.37 | . Malaysia 9103 | 125 | 8809 | 169 | 28.13 | 1.37 | . Zambia 8275 | 241 | 7004 | 1030 | 45.01 | 2.91 | . Guinea 8018 | 50 | 7020 | 948 | 61.05 | 0.62 | . Gabon 8006 | 51 | 5823 | 2132 | 359.70 | 0.64 | . Tajikistan 7871 | 63 | 6653 | 1155 | 82.53 | 0.80 | . Haiti 7649 | 183 | 4982 | 2484 | 67.08 | 2.39 | . Finland 7623 | 333 | 6980 | 310 | 137.58 | 4.37 | . Paraguay 7519 | 86 | 5326 | 2107 | 105.42 | 1.14 | . Luxembourg 7242 | 122 | 6222 | 898 | 1156.91 | 1.68 | . Lebanon 7121 | 87 | 2377 | 4657 | 104.33 | 1.22 | . Albania 6676 | 205 | 3480 | 2991 | 231.98 | 3.07 | . Mauritania 6598 | 157 | 5704 | 737 | 141.90 | 2.38 | . Libya 6302 | 132 | 740 | 5430 | 91.71 | 2.09 | . Greece 5942 | 214 | 1347 | 4381 | 57.01 | 3.60 | . Croatia 5740 | 160 | 4962 | 618 | 139.82 | 2.79 | . Djibouti 5348 | 59 | 5133 | 156 | 541.29 | 1.10 | . Maldives 5223 | 20 | 2849 | 2354 | 966.25 | 0.38 | . Equatorial Guinea 4821 | 83 | 2182 | 2556 | 343.62 | 1.72 | . Zimbabwe 4818 | 104 | 1544 | 3170 | 32.42 | 2.16 | . Hungary 4746 | 605 | 3527 | 614 | 49.13 | 12.75 | . Malawi 4714 | 152 | 2477 | 2085 | 24.64 | 3.22 | . Central African Republic 4645 | 61 | 1723 | 2861 | 96.17 | 1.31 | . Nicaragua 4115 | 128 | 2913 | 1074 | 62.12 | 3.11 | . Montenegro 3748 | 71 | 2558 | 1119 | 596.76 | 1.89 | . Republic of the Congo 3745 | 60 | 1625 | 2060 | 67.87 | 1.60 | . Eswatini 3410 | 63 | 1720 | 1627 | 293.92 | 1.85 | . Thailand 3356 | 58 | 3169 | 129 | 4.81 | 1.73 | . Namibia 3229 | 19 | 715 | 2495 | 127.08 | 0.59 | . Somalia 3227 | 93 | 1728 | 1406 | 20.30 | 2.88 | . Cuba 3093 | 88 | 2472 | 533 | 27.31 | 2.85 | . Cabo Verde 2920 | 33 | 2148 | 739 | 525.19 | 1.13 | . Sri Lanka 2880 | 11 | 2622 | 247 | 13.45 | 0.38 | . Slovakia 2615 | 31 | 1874 | 710 | 47.90 | 1.19 | . Mali 2577 | 125 | 1973 | 479 | 12.73 | 4.85 | . Suriname 2559 | 39 | 1712 | 808 | 436.22 | 1.52 | . Mozambique 2481 | 17 | 910 | 1554 | 7.94 | 0.69 | . South Sudan 2472 | 47 | 1175 | 1250 | 22.08 | 1.90 | . Lithuania 2283 | 81 | 1679 | 523 | 83.86 | 3.55 | . Slovenia 2272 | 129 | 1960 | 183 | 109.29 | 5.68 | . Rwanda 2171 | 7 | 1478 | 686 | 16.76 | 0.32 | . Estonia 2167 | 63 | 1968 | 136 | 163.36 | 2.91 | . Guinea-Bissau 2088 | 29 | 1015 | 1044 | 106.10 | 1.39 | . Benin 2001 | 38 | 1681 | 282 | 16.51 | 1.90 | . Iceland 1968 | 10 | 1844 | 114 | 576.70 | 0.51 | . Sierra Leone 1932 | 69 | 1478 | 385 | 24.22 | 3.57 | . Yemen 1831 | 523 | 919 | 389 | 6.14 | 28.56 | . Tunisia 1738 | 52 | 1272 | 414 | 14.71 | 2.99 | . Angola 1735 | 80 | 575 | 1080 | 5.28 | 4.61 | . New Zealand 1570 | 22 | 1526 | 22 | 32.56 | 1.40 | . Uruguay 1385 | 37 | 1157 | 191 | 39.87 | 2.67 | . Gambia 1346 | 32 | 227 | 1087 | 55.70 | 2.38 | . Syria 1327 | 53 | 385 | 889 | 7.58 | 3.99 | . Uganda 1313 | 9 | 1138 | 166 | 2.87 | 0.69 | . Latvia 1303 | 32 | 1078 | 193 | 69.08 | 2.46 | . Jordan 1283 | 11 | 1189 | 83 | 12.57 | 0.86 | . Georgia 1278 | 17 | 1058 | 203 | 32.04 | 1.33 | . Cyprus 1277 | 20 | 870 | 387 | 105.77 | 1.57 | . Liberia 1250 | 81 | 736 | 433 | 24.71 | 6.48 | . Burkina Faso 1211 | 54 | 990 | 167 | 5.79 | 4.46 | . Niger 1158 | 69 | 1065 | 24 | 4.78 | 5.96 | . Malta 1141 | 9 | 692 | 440 | 258.41 | 0.79 | . Togo 1070 | 26 | 752 | 292 | 12.92 | 2.43 | . Botswana 1066 | 2 | 80 | 984 | 45.33 | 0.19 | . Jamaica 1047 | 14 | 753 | 280 | 35.36 | 1.34 | . Bahamas 989 | 15 | 116 | 858 | 251.50 | 1.52 | . Andorra 963 | 52 | 839 | 72 | 1246.36 | 5.40 | . Chad 946 | 76 | 859 | 11 | 5.76 | 8.03 | . Sao Tome and Principe 881 | 15 | 804 | 62 | 401.99 | 1.70 | . Vietnam 866 | 17 | 399 | 450 | 0.89 | 1.96 | . Lesotho 781 | 24 | 175 | 582 | 36.46 | 3.07 | . Diamond Princess 712 | 13 | 651 | 48 | 0.00 | 1.83 | . San Marino 699 | 42 | 657 | 0 | 2059.64 | 6.01 | . Guyana 602 | 22 | 189 | 391 | 76.54 | 3.65 | . Tanzania 509 | 21 | 183 | 305 | 0.85 | 4.13 | . Taiwan 480 | 7 | 443 | 30 | 2.02 | 1.46 | . Burundi 408 | 1 | 315 | 92 | 3.43 | 0.25 | . Comoros 399 | 7 | 379 | 13 | 45.88 | 1.75 | . Burma 360 | 6 | 313 | 41 | 0.66 | 1.67 | . Mauritius 344 | 10 | 334 | 0 | 27.05 | 2.91 | . Trinidad and Tobago 300 | 8 | 139 | 153 | 21.44 | 2.67 | . Mongolia 293 | 0 | 269 | 24 | 8.94 | 0.00 | . Eritrea 285 | 0 | 248 | 37 | 8.04 | 0.00 | . Cambodia 268 | 0 | 220 | 48 | 1.60 | 0.00 | . Papua New Guinea 214 | 3 | 71 | 140 | 2.39 | 1.40 | . Belize 177 | 2 | 32 | 143 | 44.51 | 1.13 | . Barbados 143 | 7 | 112 | 24 | 49.76 | 4.90 | . Brunei 142 | 3 | 138 | 1 | 32.46 | 2.11 | . Monaco 138 | 4 | 113 | 21 | 351.65 | 2.90 | . Seychelles 127 | 0 | 126 | 1 | 129.14 | 0.00 | . Bhutan 113 | 0 | 97 | 16 | 14.64 | 0.00 | . Antigua and Barbuda 92 | 3 | 76 | 13 | 93.95 | 3.26 | . Liechtenstein 89 | 1 | 87 | 1 | 233.37 | 1.12 | . Saint Vincent and the Grenadines 57 | 0 | 52 | 5 | 51.38 | 0.00 | . Fiji 27 | 1 | 18 | 8 | 3.01 | 3.70 | . Saint Lucia 25 | 0 | 25 | 0 | 13.61 | 0.00 | . Timor-Leste 25 | 0 | 24 | 1 | 1.90 | 0.00 | . Grenada 24 | 0 | 23 | 1 | 21.33 | 0.00 | . Laos 20 | 0 | 19 | 1 | 0.27 | 0.00 | . Dominica 18 | 0 | 18 | 0 | 25.00 | 0.00 | . Saint Kitts and Nevis 17 | 0 | 17 | 0 | 31.96 | 0.00 | . Holy See 12 | 0 | 12 | 0 | 1483.31 | 0.00 | . Western Sahara 10 | 1 | 8 | 1 | 1.67 | 10.00 | . MS Zaandam 9 | 2 | 0 | 0 | 0.00 | 22.22 | . #collapse-hide #data = pd.read_csv(&quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv&quot;, # error_bad_lines=False) data = df_deaths.copy() data = data.drop(columns=[&quot;Lat&quot;, &quot;Long&quot;]) data = data.melt(id_vars= [&quot;state&quot;, &quot;country&quot;, &quot;continent&quot;]) data = pd.DataFrame(data.groupby([&#39;country&#39;, &quot;variable&quot;]).sum()) data.reset_index(inplace=True) data = data.rename(columns={&quot;country&quot;: &quot;location&quot;, &quot;variable&quot;: &quot;date&quot;, &quot;value&quot;: &quot;total_cases&quot;}) data[&#39;date&#39;] = pd.to_datetime(data.date) data = data.sort_values(by = &quot;date&quot;) data.loc[data.location == &quot;US&quot;,&quot;location&quot;] = &quot;United States&quot; data.loc[data.location == &quot;Korea, South&quot;,&quot;location&quot;] = &quot;South Korea&quot; data.head() . . location date total_cases . 0 Afghanistan | 2020-01-22 | 0 | . 36946 Vietnam | 2020-01-22 | 0 | . 29232 San Marino | 2020-01-22 | 0 | . 1421 Armenia | 2020-01-22 | 0 | . 20300 Lithuania | 2020-01-22 | 0 | . #collapse-hide f = plt.figure(figsize=(10,5)) f.add_subplot(111) plt.axes(axisbelow=True) plt.barh(df_countries_cases.sort_values(&#39;Confirmed&#39;)[&quot;Confirmed&quot;].index[-10:],df_countries_cases.sort_values(&#39;Confirmed&#39;)[&quot;Confirmed&quot;].values[-10:],color=&quot;darkcyan&quot;) plt.tick_params(size=5,labelsize = 13) plt.xlabel(&quot;Confirmed Cases&quot;,fontsize=18) plt.title(&quot;Top 10 Countries (Confirmed Cases)&quot;,fontsize=20) plt.grid(alpha=0.3) #plt.savefig(out+&#39;Top 10 Countries (Confirmed Cases).png&#39;) . . #collapse-hide f = plt.figure(figsize=(10,5)) f.add_subplot(111) plt.axes(axisbelow=True) plt.barh(df_countries_cases.sort_values(&#39;Deaths&#39;)[&quot;Deaths&quot;].index[-10:],df_countries_cases.sort_values(&#39;Deaths&#39;)[&quot;Deaths&quot;].values[-10:],color=&quot;crimson&quot;) plt.tick_params(size=5,labelsize = 13) plt.xlabel(&quot;Deaths Cases&quot;,fontsize=18) plt.title(&quot;Top 10 Countries (Deaths Cases)&quot;,fontsize=20) plt.grid(alpha=0.3,which=&#39;both&#39;) #plt.savefig(out+&#39;Top 10 Countries (Deaths Cases).png&#39;) . . #collapse-hide f = plt.figure(figsize=(10,5)) f.add_subplot(111) plt.axes(axisbelow=True) plt.barh(df_countries_cases.sort_values(&#39;Active&#39;)[&quot;Active&quot;].index[-10:],df_countries_cases.sort_values(&#39;Active&#39;)[&quot;Active&quot;].values[-10:],color=&quot;darkorange&quot;) plt.tick_params(size=5,labelsize = 13) plt.xlabel(&quot;Active Cases&quot;,fontsize=18) plt.title(&quot;Top 10 Countries (Active Cases)&quot;,fontsize=20) plt.grid(alpha=0.3,which=&#39;both&#39;) #plt.savefig(out+&#39;Top 10 Countries (Active Cases).png&#39;) . . #collapse-hide f = plt.figure(figsize=(10,5)) f.add_subplot(111) plt.axes(axisbelow=True) plt.barh(df_countries_cases.sort_values(&#39;Recovered&#39;)[&quot;Recovered&quot;].index[-10:],df_countries_cases.sort_values(&#39;Recovered&#39;)[&quot;Recovered&quot;].values[-10:],color=&quot;limegreen&quot;) plt.tick_params(size=5,labelsize = 13) plt.xlabel(&quot;Recovered Cases&quot;,fontsize=18) plt.title(&quot;Top 10 Countries (Recovered Cases)&quot;,fontsize=20) plt.grid(alpha=0.3,which=&#39;both&#39;) #plt.savefig(out+&#39;Top 10 Countries (Recovered Cases).png&#39;) . .",
            "url": "https://skelwadkar.github.io/Covid19_dashboard/2020/08/09/project-covid19-Copy2.html",
            "relUrl": "/2020/08/09/project-covid19-Copy2.html",
            "date": " • Aug 9, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Data Analysis for Covid19 JHU data",
            "content": "#collapse-hide from datetime import datetime time_format = &quot;%d%b%Y %H:%M&quot; #%b is basic format datetime.now().strftime(time_format) #str format of time . . &#39;09Aug2020 01:23&#39; . #collapse-hide import os import numpy as np import pandas as pd import matplotlib from IPython.display import display, Markdown from collections import defaultdict from datetime import datetime, timedelta, date import scipy as sci from sklearn.feature_extraction.text import TfidfVectorizer from sklearn.cluster import KMeans import pycountry_convert as pc import folium import branca from scipy.interpolate import make_interp_spline, BSpline import plotly.express as px import json, requests from keras.layers import Input, Dense, Activation, LeakyReLU, Dropout from keras import models from keras.optimizers import RMSprop, Adam from folium import plugins from IPython.display import HTML import warnings warnings.filterwarnings(&#39;ignore&#39;) import matplotlib.pyplot as plt import seaborn as sns from matplotlib import ticker import calmap %matplotlib inline . . Using TensorFlow backend. . #collapse-hide df_confirmed = pd.read_csv(&#39;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv&#39;) df_deaths = pd.read_csv(&#39;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv&#39;) df_recovered = pd.read_csv(&#39;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv&#39;) df_covid19 = pd.read_csv(&quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/web-data/data/cases_country.csv&quot;) df_table = pd.read_csv(&quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/web-data/data/cases_time.csv&quot;,parse_dates=[&#39;Last_Update&#39;]) . . #collapse-hide df_covid19 = df_covid19.drop([&quot;People_Tested&quot;,&quot;People_Hospitalized&quot;,&quot;UID&quot;,&quot;ISO3&quot;,&quot;Mortality_Rate&quot;],axis =1) df_confirmed = df_confirmed.rename(columns={&quot;Province/State&quot;:&quot;state&quot;,&quot;Country/Region&quot;: &quot;country&quot;}) df_deaths = df_deaths.rename(columns={&quot;Province/State&quot;:&quot;state&quot;,&quot;Country/Region&quot;: &quot;country&quot;}) df_covid19 = df_covid19.rename(columns={&quot;Country_Region&quot;: &quot;country&quot;}) df_covid19[&quot;Active&quot;] = df_covid19[&quot;Confirmed&quot;]-df_covid19[&quot;Recovered&quot;]-df_covid19[&quot;Deaths&quot;] # Changing the conuntry names as required by pycountry_convert Lib df_confirmed.loc[df_confirmed[&#39;country&#39;] == &quot;US&quot;, &quot;country&quot;] = &quot;USA&quot; df_deaths.loc[df_deaths[&#39;country&#39;] == &quot;US&quot;, &quot;country&quot;] = &quot;USA&quot; df_covid19.loc[df_covid19[&#39;country&#39;] == &quot;US&quot;, &quot;country&quot;] = &quot;USA&quot; df_table.loc[df_table[&#39;Country_Region&#39;] == &quot;US&quot;, &quot;Country_Region&quot;] = &quot;USA&quot; # df_recovered.loc[df_recovered[&#39;country&#39;] == &quot;US&quot;, &quot;country&quot;] = &quot;USA&quot; df_confirmed.loc[df_confirmed[&#39;country&#39;] == &#39;Korea, South&#39;, &quot;country&quot;] = &#39;South Korea&#39; df_deaths.loc[df_deaths[&#39;country&#39;] == &#39;Korea, South&#39;, &quot;country&quot;] = &#39;South Korea&#39; df_covid19.loc[df_covid19[&#39;country&#39;] == &quot;Korea, South&quot;, &quot;country&quot;] = &quot;South Korea&quot; df_table.loc[df_table[&#39;Country_Region&#39;] == &quot;Korea, South&quot;, &quot;Country_Region&quot;] = &quot;South Korea&quot; # df_recovered.loc[df_recovered[&#39;country&#39;] == &#39;Korea, South&#39;, &quot;country&quot;] = &#39;South Korea&#39; df_confirmed.loc[df_confirmed[&#39;country&#39;] == &#39;Taiwan*&#39;, &quot;country&quot;] = &#39;Taiwan&#39; df_deaths.loc[df_deaths[&#39;country&#39;] == &#39;Taiwan*&#39;, &quot;country&quot;] = &#39;Taiwan&#39; df_covid19.loc[df_covid19[&#39;country&#39;] == &quot;Taiwan*&quot;, &quot;country&quot;] = &quot;Taiwan&quot; df_table.loc[df_table[&#39;Country_Region&#39;] == &quot;Taiwan*&quot;, &quot;Country_Region&quot;] = &quot;Taiwan&quot; # df_recovered.loc[df_recovered[&#39;country&#39;] == &#39;Taiwan*&#39;, &quot;country&quot;] = &#39;Taiwan&#39; df_confirmed.loc[df_confirmed[&#39;country&#39;] == &#39;Congo (Kinshasa)&#39;, &quot;country&quot;] = &#39;Democratic Republic of the Congo&#39; df_deaths.loc[df_deaths[&#39;country&#39;] == &#39;Congo (Kinshasa)&#39;, &quot;country&quot;] = &#39;Democratic Republic of the Congo&#39; df_covid19.loc[df_covid19[&#39;country&#39;] == &quot;Congo (Kinshasa)&quot;, &quot;country&quot;] = &quot;Democratic Republic of the Congo&quot; df_table.loc[df_table[&#39;Country_Region&#39;] == &quot;Congo (Kinshasa)&quot;, &quot;Country_Region&quot;] = &quot;Democratic Republic of the Congo&quot; # df_recovered.loc[df_recovered[&#39;country&#39;] == &#39;Congo (Kinshasa)&#39;, &quot;country&quot;] = &#39;Democratic Republic of the Congo&#39; df_confirmed.loc[df_confirmed[&#39;country&#39;] == &quot;Cote d&#39;Ivoire&quot;, &quot;country&quot;] = &quot;Côte d&#39;Ivoire&quot; df_deaths.loc[df_deaths[&#39;country&#39;] == &quot;Cote d&#39;Ivoire&quot;, &quot;country&quot;] = &quot;Côte d&#39;Ivoire&quot; df_covid19.loc[df_covid19[&#39;country&#39;] == &quot;Cote d&#39;Ivoire&quot;, &quot;country&quot;] = &quot;Côte d&#39;Ivoire&quot; df_table.loc[df_table[&#39;Country_Region&#39;] == &quot;Cote d&#39;Ivoire&quot;, &quot;Country_Region&quot;] = &quot;Côte d&#39;Ivoire&quot; # df_recovered.loc[df_recovered[&#39;country&#39;] == &quot;Cote d&#39;Ivoire&quot;, &quot;country&quot;] = &quot;Côte d&#39;Ivoire&quot; df_confirmed.loc[df_confirmed[&#39;country&#39;] == &quot;Reunion&quot;, &quot;country&quot;] = &quot;Réunion&quot; df_deaths.loc[df_deaths[&#39;country&#39;] == &quot;Reunion&quot;, &quot;country&quot;] = &quot;Réunion&quot; df_covid19.loc[df_covid19[&#39;country&#39;] == &quot;Reunion&quot;, &quot;country&quot;] = &quot;Réunion&quot; df_table.loc[df_table[&#39;Country_Region&#39;] == &quot;Reunion&quot;, &quot;Country_Region&quot;] = &quot;Réunion&quot; # df_recovered.loc[df_recovered[&#39;country&#39;] == &quot;Reunion&quot;, &quot;country&quot;] = &quot;Réunion&quot; df_confirmed.loc[df_confirmed[&#39;country&#39;] == &#39;Congo (Brazzaville)&#39;, &quot;country&quot;] = &#39;Republic of the Congo&#39; df_deaths.loc[df_deaths[&#39;country&#39;] == &#39;Congo (Brazzaville)&#39;, &quot;country&quot;] = &#39;Republic of the Congo&#39; df_covid19.loc[df_covid19[&#39;country&#39;] == &quot;Congo (Brazzaville)&quot;, &quot;country&quot;] = &quot;Republic of the Congo&quot; df_table.loc[df_table[&#39;Country_Region&#39;] == &quot;Congo (Brazzaville)&quot;, &quot;Country_Region&quot;] = &quot;Republic of the Congo&quot; # df_recovered.loc[df_recovered[&#39;country&#39;] == &#39;Congo (Brazzaville)&#39;, &quot;country&quot;] = &#39;Republic of the Congo&#39; df_confirmed.loc[df_confirmed[&#39;country&#39;] == &#39;Bahamas, The&#39;, &quot;country&quot;] = &#39;Bahamas&#39; df_deaths.loc[df_deaths[&#39;country&#39;] == &#39;Bahamas, The&#39;, &quot;country&quot;] = &#39;Bahamas&#39; df_covid19.loc[df_covid19[&#39;country&#39;] == &quot;Bahamas, The&quot;, &quot;country&quot;] = &quot;Bahamas&quot; df_table.loc[df_table[&#39;Country_Region&#39;] == &quot;Bahamas, The&quot;, &quot;Country_Region&quot;] = &quot;Bahamas&quot; # df_recovered.loc[df_recovered[&#39;country&#39;] == &#39;Bahamas, The&#39;, &quot;country&quot;] = &#39;Bahamas&#39; df_confirmed.loc[df_confirmed[&#39;country&#39;] == &#39;Gambia, The&#39;, &quot;country&quot;] = &#39;Gambia&#39; df_deaths.loc[df_deaths[&#39;country&#39;] == &#39;Gambia, The&#39;, &quot;country&quot;] = &#39;Gambia&#39; df_covid19.loc[df_covid19[&#39;country&#39;] == &quot;Gambia, The&quot;, &quot;country&quot;] = &quot;Gambia&quot; df_table.loc[df_table[&#39;Country_Region&#39;] == &quot;Gambia&quot;, &quot;Country_Region&quot;] = &quot;Gambia&quot; # df_recovered.loc[df_recovered[&#39;country&#39;] == &#39;Gambia, The&#39;, &quot;country&quot;] = &#39;Gambia&#39; . . #collapse-hide # getting all countries countries = np.asarray(df_confirmed[&quot;country&quot;]) countries1 = np.asarray(df_covid19[&quot;country&quot;]) # Continent_code to Continent_names continents = { &#39;NA&#39;: &#39;North America&#39;, &#39;SA&#39;: &#39;South America&#39;, &#39;AS&#39;: &#39;Asia&#39;, &#39;OC&#39;: &#39;Australia&#39;, &#39;AF&#39;: &#39;Africa&#39;, &#39;EU&#39; : &#39;Europe&#39;, &#39;na&#39; : &#39;Others&#39; } # Defininng Function for getting continent code for country. def country_to_continent_code(country): try: return pc.country_alpha2_to_continent_code(pc.country_name_to_country_alpha2(country)) except : return &#39;na&#39; #Collecting Continent Information df_confirmed.insert(2,&quot;continent&quot;, [continents[country_to_continent_code(country)] for country in countries[:]]) df_deaths.insert(2,&quot;continent&quot;, [continents[country_to_continent_code(country)] for country in countries[:]]) df_covid19.insert(1,&quot;continent&quot;, [continents[country_to_continent_code(country)] for country in countries1[:]]) df_table.insert(1,&quot;continent&quot;, [continents[country_to_continent_code(country)] for country in df_table[&quot;Country_Region&quot;].values]) . . #collapse-hide df_table = df_table[df_table[&quot;continent&quot;] != &quot;Others&quot;] df_confirmed = df_confirmed.replace(np.nan, &#39;&#39;, regex=True) df_deaths = df_deaths.replace(np.nan, &#39;&#39;, regex=True) . . #collapse-hide def plot_params(ax,axis_label= None, plt_title = None,label_size=15, axis_fsize = 15, title_fsize = 20, scale = &#39;linear&#39; ): # Tick-Parameters ax.xaxis.set_minor_locator(ticker.AutoMinorLocator()) ax.yaxis.set_minor_locator(ticker.AutoMinorLocator()) ax.tick_params(which=&#39;both&#39;, width=1,labelsize=label_size) ax.tick_params(which=&#39;major&#39;, length=6) ax.tick_params(which=&#39;minor&#39;, length=3, color=&#39;0.8&#39;) # Grid plt.grid(lw = 1, ls = &#39;-&#39;, c = &quot;0.7&quot;, which = &#39;major&#39;) plt.grid(lw = 1, ls = &#39;-&#39;, c = &quot;0.9&quot;, which = &#39;minor&#39;) # Plot Title plt.title( plt_title,{&#39;fontsize&#39;:title_fsize}) # Yaxis sacle plt.yscale(scale) plt.minorticks_on() # Plot Axes Labels xl = plt.xlabel(axis_label[0],fontsize = axis_fsize) yl = plt.ylabel(axis_label[1],fontsize = axis_fsize) . . #collapse-hide def visualize_covid_cases(confirmed, deaths, continent=None , country = None , state = None, period = None, figure = None, scale = &quot;linear&quot;): x = 0 if figure == None: f = plt.figure(figsize=(10,10)) # Sub plot ax = f.add_subplot(111) else : f = figure[0] # Sub plot ax = f.add_subplot(figure[1],figure[2],figure[3]) ax.set_axisbelow(True) plt.tight_layout(pad=10, w_pad=5, h_pad=5) stats = [confirmed, deaths] label = [&quot;Confirmed&quot;, &quot;Deaths&quot;] if continent != None: params = [&quot;continent&quot;,continent] elif country != None: params = [&quot;country&quot;,country] else: params = [&quot;All&quot;, &quot;All&quot;] color = [&quot;darkcyan&quot;,&quot;crimson&quot;] marker_style = dict(linewidth=3, linestyle=&#39;-&#39;, marker=&#39;o&#39;,markersize=4, markerfacecolor=&#39;#ffffff&#39;) for i,stat in enumerate(stats): if params[1] == &quot;All&quot; : cases = np.sum(np.asarray(stat.iloc[:,5:]),axis = 0)[x:] else : cases = np.sum(np.asarray(stat[stat[params[0]] == params[1]].iloc[:,5:]),axis = 0)[x:] date = np.arange(1,cases.shape[0]+1)[x:] plt.plot(date,cases,label = label[i]+&quot; (Total : &quot;+str(cases[-1])+&quot;)&quot;,color=color[i],**marker_style) plt.fill_between(date,cases,color=color[i],alpha=0.3) if params[1] == &quot;All&quot; : Total_confirmed = np.sum(np.asarray(stats[0].iloc[:,5:]),axis = 0)[x:] Total_deaths = np.sum(np.asarray(stats[1].iloc[:,5:]),axis = 0)[x:] else : Total_confirmed = np.sum(np.asarray(stats[0][stat[params[0]] == params[1]].iloc[:,5:]),axis = 0)[x:] Total_deaths = np.sum(np.asarray(stats[1][stat[params[0]] == params[1]].iloc[:,5:]),axis = 0)[x:] text = &quot;From &quot;+stats[0].columns[5]+&quot; to &quot;+stats[0].columns[-1]+&quot; n&quot; text += &quot;Mortality rate : &quot;+ str(int(Total_deaths[-1]/(Total_confirmed[-1])*10000)/100)+&quot; n&quot; text += &quot;Last 5 Days: n&quot; text += &quot;Confirmed : &quot; + str(Total_confirmed[-1] - Total_confirmed[-6])+&quot; n&quot; text += &quot;Deaths : &quot; + str(Total_deaths[-1] - Total_deaths[-6])+&quot; n&quot; text += &quot;Last 24 Hours: n&quot; text += &quot;Confirmed : &quot; + str(Total_confirmed[-1] - Total_confirmed[-2])+&quot; n&quot; text += &quot;Deaths : &quot; + str(Total_deaths[-1] - Total_deaths[-2])+&quot; n&quot; plt.text(0.02, 0.78, text, fontsize=15, horizontalalignment=&#39;left&#39;, verticalalignment=&#39;top&#39;, transform=ax.transAxes,bbox=dict(facecolor=&#39;white&#39;, alpha=0.4)) # Plot Axes Labels axis_label = [&quot;Days (&quot;+df_confirmed.columns[5]+&quot; - &quot;+df_confirmed.columns[-1]+&quot;)&quot;,&quot;No of Cases&quot;] # Plot Parameters plot_params(ax,axis_label,scale = scale) # Plot Title if params[1] == &quot;All&quot; : plt.title(&quot;COVID-19 Cases World&quot;,{&#39;fontsize&#39;:25}) else: plt.title(&quot;COVID-19: &quot;+params[1] ,{&#39;fontsize&#39;:25}) # Legend Location l = plt.legend(loc= &quot;best&quot;,fontsize = 15) if figure == None: plt.show() . . #collapse-hide def get_total_cases(cases, country = &quot;All&quot;): if(country == &quot;All&quot;) : return np.sum(np.asarray(cases.iloc[:,5:]),axis = 0)[-1] else : return np.sum(np.asarray(cases[cases[&quot;country&quot;] == country].iloc[:,5:]),axis = 0)[-1] . . #collapse-hide def get_mortality_rate(confirmed,deaths, continent = None, country = None): if continent != None: params = [&quot;continent&quot;,continent] elif country != None: params = [&quot;country&quot;,country] else : params = [&quot;All&quot;, &quot;All&quot;] if params[1] == &quot;All&quot; : Total_confirmed = np.sum(np.asarray(confirmed.iloc[:,5:]),axis = 0) Total_deaths = np.sum(np.asarray(deaths.iloc[:,5:]),axis = 0) mortality_rate = np.round((Total_deaths/(Total_confirmed+1.01))*100,2) else : Total_confirmed = np.sum(np.asarray(confirmed[confirmed[params[0]] == params[1]].iloc[:,5:]),axis = 0) Total_deaths = np.sum(np.asarray(deaths[deaths[params[0]] == params[1]].iloc[:,5:]),axis = 0) mortality_rate = np.round((Total_deaths/(Total_confirmed+1.01))*100,2) return np.nan_to_num(mortality_rate) . . #collapse-hide def dd(date1,date2): return (datetime.strptime(date1,&#39;%m/%d/%y&#39;) - datetime.strptime(date2,&#39;%m/%d/%y&#39;)).days out = &quot;&quot; . . #collapse-hide df_countries_cases = df_covid19.copy().drop([&#39;Lat&#39;,&#39;Long_&#39;,&#39;continent&#39;,&#39;Last_Update&#39;],axis =1) df_countries_cases.index = df_countries_cases[&quot;country&quot;] df_countries_cases = df_countries_cases.drop([&#39;country&#39;],axis=1) df_continents_cases = df_covid19.copy().drop([&#39;Lat&#39;,&#39;Long_&#39;,&#39;country&#39;,&#39;Last_Update&#39;],axis =1) df_continents_cases = df_continents_cases.groupby([&quot;continent&quot;]).sum() df_countries_cases.fillna(0,inplace=True) df_continents_cases.fillna(0,inplace=True) . . #collapse-hide df_t = pd.DataFrame(pd.to_numeric(df_countries_cases.sum()),dtype=np.float64).transpose() df_t[&quot;Mortality Rate (per 100)&quot;] = np.round(100*df_t[&quot;Deaths&quot;]/df_t[&quot;Confirmed&quot;],2) df_t.style.background_gradient(cmap=&#39;Wistia&#39;,axis=1).format(&quot;{:.2f}&quot;).format(&quot;{:.0f}&quot;,subset=[&quot;Confirmed&quot;,&quot;Deaths&quot;,&quot;Recovered&quot;,&quot;Active&quot;]) . . Confirmed Deaths Recovered Active Incident_Rate Mortality Rate (per 100) . 0 19637506 | 726781 | 11939109 | 6867818 | 59834.23 | 3.70 | . #collapse-hide df_continents_cases[&quot;Mortality Rate (per 100)&quot;] = np.round(100*df_continents_cases[&quot;Deaths&quot;]/df_continents_cases[&quot;Confirmed&quot;],2) df_continents_cases.style.background_gradient(cmap=&#39;Blues&#39;,subset=[&quot;Confirmed&quot;]) .background_gradient(cmap=&#39;Reds&#39;,subset=[&quot;Deaths&quot;]) .background_gradient(cmap=&#39;Greens&#39;,subset=[&quot;Recovered&quot;]) .background_gradient(cmap=&#39;Purples&#39;,subset=[&quot;Active&quot;]) .background_gradient(cmap=&#39;Pastel1_r&#39;,subset=[&quot;Incident_Rate&quot;]) .background_gradient(cmap=&#39;YlOrBr&#39;,subset=[&quot;Mortality Rate (per 100)&quot;]) .format(&quot;{:.2f}&quot;) .format(&quot;{:.0f}&quot;,subset=[&quot;Confirmed&quot;,&quot;Deaths&quot;,&quot;Recovered&quot;,&quot;Active&quot;]) . . Confirmed Deaths Recovered Active Incident_Rate Mortality Rate (per 100) . continent . Africa 1032791 | 22865 | 718649 | 291277 | 5114.99 | 2.21 | . Asia 4944004 | 107886 | 3729990 | 1106128 | 19210.30 | 2.18 | . Australia 22868 | 321 | 13469 | 9078 | 120.46 | 1.40 | . Europe 3003135 | 205403 | 1739346 | 954595 | 17296.23 | 6.84 | . North America 5910423 | 231228 | 2294697 | 3384498 | 6935.08 | 3.91 | . Others 39806 | 1000 | 23379 | 15420 | 3139.50 | 2.51 | . South America 4684479 | 158078 | 3419579 | 1106822 | 8017.68 | 3.37 | . #collapse-hide df_countries_cases[&quot;Mortality Rate (per 100)&quot;] = np.round(100*df_countries_cases[&quot;Deaths&quot;]/df_countries_cases[&quot;Confirmed&quot;],2) df_countries_cases.sort_values(&#39;Confirmed&#39;, ascending= False).style.background_gradient(cmap=&#39;Blues&#39;,subset=[&quot;Confirmed&quot;]) .background_gradient(cmap=&#39;Reds&#39;,subset=[&quot;Deaths&quot;]) .background_gradient(cmap=&#39;Greens&#39;,subset=[&quot;Recovered&quot;]) .background_gradient(cmap=&#39;Purples&#39;,subset=[&quot;Active&quot;]) .background_gradient(cmap=&#39;Pastel1_r&#39;,subset=[&quot;Incident_Rate&quot;]) .background_gradient(cmap=&#39;YlOrBr&#39;,subset=[&quot;Mortality Rate (per 100)&quot;]) .format(&quot;{:.2f}&quot;) .format(&quot;{:.0f}&quot;,subset=[&quot;Confirmed&quot;,&quot;Deaths&quot;,&quot;Recovered&quot;,&quot;Active&quot;]) . . Confirmed Deaths Recovered Active Incident_Rate Mortality Rate (per 100) . country . USA 4997929 | 162423 | 1643118 | 3192388 | 1516.98 | 3.25 | . Brazil 3012412 | 100477 | 2321537 | 590398 | 1417.21 | 3.34 | . India 2153010 | 43379 | 1480884 | 628747 | 156.01 | 2.01 | . Russia 880563 | 14827 | 688856 | 176880 | 603.40 | 1.68 | . South Africa 553188 | 10210 | 404568 | 138410 | 932.73 | 1.85 | . Mexico 475902 | 52006 | 377125 | 46771 | 372.40 | 10.93 | . Peru 463875 | 20649 | 319171 | 124055 | 1406.88 | 4.45 | . Colombia 376870 | 12540 | 204591 | 159739 | 740.66 | 3.33 | . Chile 371023 | 10011 | 344133 | 16879 | 1940.88 | 2.70 | . Iran 324692 | 18264 | 282122 | 24306 | 386.57 | 5.63 | . Spain 314362 | 28503 | 150376 | 135483 | 672.36 | 9.07 | . United Kingdom 311461 | 46651 | 1449 | 263361 | 458.80 | 14.98 | . Saudi Arabia 287262 | 3130 | 250440 | 33692 | 825.14 | 1.09 | . Pakistan 283487 | 6068 | 259604 | 17815 | 128.34 | 2.14 | . Bangladesh 255113 | 3365 | 146604 | 105144 | 154.91 | 1.32 | . Italy 250103 | 35203 | 201947 | 12953 | 413.65 | 14.08 | . Argentina 241811 | 4523 | 108242 | 129046 | 535.03 | 1.87 | . Turkey 239622 | 5829 | 222656 | 11137 | 284.12 | 2.43 | . France 235208 | 30327 | 82968 | 121913 | 360.34 | 12.89 | . Germany 216903 | 9201 | 196550 | 11152 | 258.88 | 4.24 | . Iraq 147389 | 5310 | 105504 | 36575 | 366.43 | 3.60 | . Philippines 126885 | 2209 | 67117 | 57559 | 115.79 | 1.74 | . Indonesia 123503 | 5658 | 79306 | 38539 | 45.15 | 4.58 | . Canada 121148 | 9024 | 105255 | 6869 | 320.03 | 7.45 | . Qatar 112650 | 182 | 109438 | 3030 | 3910.02 | 0.16 | . Kazakhstan 98701 | 1058 | 72273 | 25370 | 525.66 | 1.07 | . Egypt 95314 | 4992 | 51672 | 38650 | 93.14 | 5.24 | . Ecuador 93572 | 5916 | 71605 | 16051 | 530.36 | 6.32 | . Bolivia 89055 | 3587 | 28904 | 56564 | 762.91 | 4.03 | . China 88672 | 4681 | 81969 | 2022 | 6.31 | 5.28 | . Israel 82324 | 593 | 57071 | 24660 | 951.11 | 0.72 | . Sweden 82323 | 5763 | 0 | 0 | 815.14 | 7.00 | . Ukraine 81534 | 1906 | 45006 | 34622 | 186.43 | 2.34 | . Oman 81357 | 509 | 73481 | 7367 | 1593.17 | 0.63 | . Dominican Republic 78778 | 1289 | 42538 | 34951 | 726.20 | 1.64 | . Panama 73651 | 1609 | 47484 | 24558 | 1706.95 | 2.18 | . Belgium 73401 | 9870 | 17766 | 45765 | 633.33 | 13.45 | . Kuwait 71199 | 474 | 62806 | 7919 | 1667.20 | 0.67 | . Belarus 68738 | 585 | 64744 | 3409 | 727.44 | 0.85 | . United Arab Emirates 62300 | 356 | 56245 | 5699 | 629.90 | 0.57 | . Romania 60623 | 2659 | 29872 | 28092 | 315.13 | 4.39 | . Netherlands 58717 | 6178 | 237 | 52302 | 342.68 | 10.52 | . Guatemala 56189 | 2197 | 44072 | 9920 | 313.63 | 3.91 | . Singapore 54929 | 27 | 48583 | 6319 | 938.90 | 0.05 | . Portugal 52537 | 1750 | 38364 | 12423 | 515.23 | 3.33 | . Poland 51167 | 1800 | 36403 | 12964 | 135.20 | 3.52 | . Japan 47342 | 1042 | 31248 | 15052 | 37.43 | 2.20 | . Honduras 46973 | 1476 | 6428 | 39069 | 474.25 | 3.14 | . Nigeria 46140 | 942 | 33044 | 12154 | 22.38 | 2.04 | . Bahrain 43629 | 161 | 40549 | 2919 | 2564.02 | 0.37 | . Ghana 40533 | 206 | 37702 | 2625 | 130.44 | 0.51 | . Armenia 40185 | 785 | 32395 | 7005 | 1356.12 | 1.95 | . Kyrgyzstan 39571 | 1459 | 31062 | 7050 | 606.53 | 3.69 | . Afghanistan 37054 | 1312 | 25960 | 9782 | 95.19 | 3.54 | . Switzerland 36451 | 1986 | 31900 | 2565 | 421.17 | 5.45 | . Algeria 34693 | 1293 | 24083 | 9317 | 79.12 | 3.73 | . Azerbaijan 33481 | 488 | 30056 | 2937 | 330.21 | 1.46 | . Morocco 32007 | 480 | 22190 | 9337 | 86.72 | 1.50 | . Uzbekistan 29652 | 187 | 21006 | 8459 | 88.59 | 0.63 | . Serbia 27863 | 632 | 0 | 0 | 318.89 | 2.27 | . Moldova 27443 | 841 | 19100 | 7502 | 680.30 | 3.06 | . Ireland 26644 | 1772 | 23364 | 1508 | 539.59 | 6.65 | . Kenya 25837 | 418 | 11899 | 13520 | 48.05 | 1.62 | . Venezuela 24961 | 215 | 13356 | 11390 | 87.78 | 0.86 | . Costa Rica 22802 | 228 | 7589 | 14985 | 447.61 | 1.00 | . Nepal 22592 | 73 | 16313 | 6206 | 77.54 | 0.32 | . Ethiopia 22253 | 390 | 9707 | 12156 | 19.36 | 1.75 | . Austria 21919 | 721 | 19812 | 1386 | 243.37 | 3.29 | . Australia 21084 | 295 | 11874 | 8915 | 82.81 | 1.40 | . El Salvador 19978 | 536 | 9515 | 9927 | 308.01 | 2.68 | . Czechia 18235 | 389 | 12764 | 5082 | 170.28 | 2.13 | . Cameroon 18042 | 395 | 15320 | 2327 | 67.97 | 2.19 | . Côte d&#39;Ivoire 16620 | 104 | 12893 | 3623 | 63.01 | 0.63 | . Denmark 14751 | 617 | 13047 | 1087 | 254.67 | 4.18 | . South Korea 14598 | 305 | 13642 | 651 | 28.47 | 2.09 | . West Bank and Gaza 13928 | 96 | 7706 | 6126 | 273.02 | 0.69 | . Bosnia and Herzegovina 13687 | 394 | 7373 | 5920 | 417.18 | 2.88 | . Bulgaria 13343 | 445 | 7718 | 5180 | 192.03 | 3.34 | . Madagascar 12922 | 141 | 10604 | 2177 | 46.66 | 1.09 | . Sudan 11894 | 773 | 6243 | 4878 | 27.12 | 6.50 | . North Macedonia 11754 | 523 | 7622 | 3609 | 564.18 | 4.45 | . Senegal 11003 | 229 | 7329 | 3445 | 65.71 | 2.08 | . Kosovo 9869 | 303 | 5480 | 4086 | 545.14 | 3.07 | . Norway 9599 | 256 | 8857 | 486 | 177.06 | 2.67 | . Democratic Republic of the Congo 9436 | 218 | 8275 | 943 | 10.54 | 2.31 | . Malaysia 9070 | 125 | 8775 | 170 | 28.02 | 1.38 | . Gabon 7923 | 51 | 5704 | 2168 | 355.97 | 0.64 | . Zambia 7903 | 203 | 6431 | 1269 | 42.99 | 2.57 | . Guinea 7875 | 50 | 6828 | 997 | 59.96 | 0.63 | . Tajikistan 7706 | 62 | 6484 | 1160 | 80.80 | 0.80 | . Haiti 7611 | 182 | 4893 | 2536 | 66.75 | 2.39 | . Finland 7568 | 331 | 6980 | 257 | 136.59 | 4.37 | . Luxembourg 7169 | 120 | 5848 | 1201 | 1145.25 | 1.67 | . Paraguay 6705 | 72 | 5181 | 1452 | 94.01 | 1.07 | . Mauritania 6510 | 157 | 5527 | 826 | 140.01 | 2.41 | . Albania 6275 | 193 | 3268 | 2814 | 218.05 | 3.08 | . Lebanon 6223 | 78 | 2043 | 4102 | 91.17 | 1.25 | . Croatia 5543 | 157 | 4817 | 569 | 135.02 | 2.83 | . Greece 5421 | 211 | 1374 | 3836 | 52.01 | 3.89 | . Djibouti 5338 | 59 | 5083 | 196 | 540.28 | 1.11 | . Libya 5232 | 113 | 691 | 4428 | 76.14 | 2.16 | . Maldives 4898 | 19 | 2791 | 2088 | 906.13 | 0.39 | . Equatorial Guinea 4821 | 83 | 2182 | 2556 | 343.62 | 1.72 | . Hungary 4653 | 602 | 3491 | 560 | 48.17 | 12.94 | . Central African Republic 4641 | 59 | 1716 | 2866 | 96.09 | 1.27 | . Malawi 4624 | 143 | 2329 | 2152 | 24.17 | 3.09 | . Zimbabwe 4575 | 102 | 1416 | 3057 | 30.78 | 2.23 | . Nicaragua 3902 | 123 | 2913 | 866 | 58.90 | 3.15 | . Republic of the Congo 3664 | 58 | 1589 | 2017 | 66.40 | 1.58 | . Montenegro 3588 | 62 | 2407 | 1119 | 571.28 | 1.73 | . Thailand 3348 | 58 | 3150 | 140 | 4.80 | 1.73 | . Somalia 3227 | 93 | 1728 | 1406 | 20.30 | 2.88 | . Eswatini 3128 | 56 | 1565 | 1507 | 269.62 | 1.79 | . Cuba 2888 | 88 | 2442 | 358 | 25.50 | 3.05 | . Sri Lanka 2841 | 11 | 2576 | 254 | 13.27 | 0.39 | . Cabo Verde 2835 | 32 | 2073 | 730 | 509.90 | 1.13 | . Namibia 2802 | 16 | 575 | 2211 | 110.28 | 0.57 | . Slovakia 2566 | 31 | 1861 | 674 | 47.00 | 1.21 | . Mali 2565 | 125 | 1960 | 480 | 12.67 | 4.87 | . South Sudan 2463 | 47 | 1175 | 1241 | 22.00 | 1.91 | . Suriname 2306 | 29 | 1558 | 719 | 393.09 | 1.26 | . Slovenia 2247 | 126 | 1927 | 194 | 108.08 | 5.61 | . Mozambique 2241 | 16 | 832 | 1393 | 7.17 | 0.71 | . Lithuania 2231 | 81 | 1668 | 482 | 81.95 | 3.63 | . Estonia 2147 | 63 | 1961 | 123 | 161.85 | 2.93 | . Rwanda 2134 | 6 | 1300 | 828 | 16.48 | 0.28 | . Guinea-Bissau 2052 | 29 | 944 | 1079 | 104.27 | 1.41 | . Iceland 1955 | 10 | 1833 | 112 | 572.89 | 0.51 | . Benin 1936 | 38 | 1600 | 298 | 15.97 | 1.96 | . Sierra Leone 1895 | 68 | 1442 | 385 | 23.76 | 3.59 | . Yemen 1797 | 512 | 910 | 375 | 6.02 | 28.49 | . Tunisia 1678 | 51 | 1259 | 368 | 14.20 | 3.04 | . Angola 1572 | 70 | 564 | 938 | 4.78 | 4.45 | . New Zealand 1569 | 22 | 1524 | 23 | 32.54 | 1.40 | . Uruguay 1335 | 37 | 1112 | 186 | 38.43 | 2.77 | . Latvia 1288 | 32 | 1070 | 186 | 68.29 | 2.48 | . Uganda 1267 | 6 | 1115 | 146 | 2.77 | 0.47 | . Jordan 1246 | 11 | 1178 | 57 | 12.21 | 0.88 | . Liberia 1234 | 79 | 714 | 441 | 24.40 | 6.40 | . Cyprus 1233 | 19 | 856 | 358 | 102.12 | 1.54 | . Georgia 1216 | 17 | 996 | 203 | 30.48 | 1.40 | . Burkina Faso 1175 | 54 | 974 | 147 | 5.62 | 4.60 | . Niger 1157 | 69 | 1057 | 31 | 4.78 | 5.96 | . Syria 1125 | 50 | 331 | 744 | 6.43 | 4.44 | . Gambia 1090 | 19 | 146 | 925 | 45.10 | 1.74 | . Togo 1046 | 23 | 721 | 302 | 12.63 | 2.20 | . Malta 1035 | 9 | 675 | 351 | 234.41 | 0.87 | . Jamaica 1003 | 13 | 745 | 245 | 33.87 | 1.30 | . Andorra 955 | 52 | 839 | 64 | 1236.01 | 5.45 | . Chad 942 | 76 | 839 | 27 | 5.73 | 8.07 | . Bahamas 878 | 14 | 99 | 765 | 223.27 | 1.59 | . Sao Tome and Principe 878 | 15 | 800 | 63 | 400.62 | 1.71 | . Vietnam 812 | 10 | 395 | 407 | 0.83 | 1.23 | . Botswana 804 | 2 | 63 | 739 | 34.19 | 0.25 | . Lesotho 742 | 23 | 175 | 544 | 34.64 | 3.10 | . Diamond Princess 712 | 13 | 651 | 48 | 0.00 | 1.83 | . San Marino 699 | 42 | 657 | 0 | 2059.64 | 6.01 | . Guyana 554 | 22 | 189 | 343 | 70.43 | 3.97 | . Tanzania 509 | 21 | 183 | 305 | 0.85 | 4.13 | . Taiwan 479 | 7 | 441 | 31 | 2.01 | 1.46 | . Burundi 405 | 1 | 312 | 92 | 3.41 | 0.25 | . Comoros 399 | 7 | 369 | 23 | 45.88 | 1.75 | . Burma 359 | 6 | 311 | 42 | 0.66 | 1.67 | . Mauritius 344 | 10 | 334 | 0 | 27.05 | 2.91 | . Mongolia 293 | 0 | 260 | 33 | 8.94 | 0.00 | . Eritrea 285 | 0 | 245 | 40 | 8.04 | 0.00 | . Trinidad and Tobago 275 | 8 | 135 | 132 | 19.65 | 2.91 | . Cambodia 248 | 0 | 217 | 31 | 1.48 | 0.00 | . Papua New Guinea 188 | 3 | 53 | 132 | 2.10 | 1.60 | . Belize 146 | 2 | 32 | 112 | 36.72 | 1.37 | . Brunei 142 | 3 | 138 | 1 | 32.46 | 2.11 | . Barbados 138 | 7 | 108 | 23 | 48.02 | 5.07 | . Monaco 131 | 4 | 112 | 15 | 333.81 | 3.05 | . Seychelles 126 | 0 | 125 | 1 | 128.13 | 0.00 | . Bhutan 108 | 0 | 96 | 12 | 14.00 | 0.00 | . Antigua and Barbuda 92 | 3 | 76 | 13 | 93.95 | 3.26 | . Liechtenstein 89 | 1 | 85 | 3 | 233.37 | 1.12 | . Saint Vincent and the Grenadines 56 | 0 | 49 | 7 | 50.47 | 0.00 | . Fiji 27 | 1 | 18 | 8 | 3.01 | 3.70 | . Saint Lucia 25 | 0 | 24 | 1 | 13.61 | 0.00 | . Timor-Leste 25 | 0 | 24 | 1 | 1.90 | 0.00 | . Grenada 24 | 0 | 23 | 1 | 21.33 | 0.00 | . Laos 20 | 0 | 19 | 1 | 0.27 | 0.00 | . Dominica 18 | 0 | 18 | 0 | 25.00 | 0.00 | . Saint Kitts and Nevis 17 | 0 | 16 | 1 | 31.96 | 0.00 | . Holy See 12 | 0 | 12 | 0 | 1483.31 | 0.00 | . Western Sahara 10 | 1 | 8 | 1 | 1.67 | 10.00 | . MS Zaandam 9 | 2 | 0 | 0 | 0.00 | 22.22 | . #collapse-hide f = plt.figure(figsize=(10,5)) f.add_subplot(111) plt.axes(axisbelow=True) plt.barh(df_countries_cases.sort_values(&#39;Confirmed&#39;)[&quot;Confirmed&quot;].index[-10:],df_countries_cases.sort_values(&#39;Confirmed&#39;)[&quot;Confirmed&quot;].values[-10:],color=&quot;darkcyan&quot;) plt.tick_params(size=5,labelsize = 13) plt.xlabel(&quot;Confirmed Cases&quot;,fontsize=18) plt.title(&quot;Top 10 Countries (Confirmed Cases)&quot;,fontsize=20) plt.grid(alpha=0.3) #plt.savefig(out+&#39;Top 10 Countries (Confirmed Cases).png&#39;) . . #collapse-hide f = plt.figure(figsize=(10,5)) f.add_subplot(111) plt.axes(axisbelow=True) plt.barh(df_countries_cases.sort_values(&#39;Deaths&#39;)[&quot;Deaths&quot;].index[-10:],df_countries_cases.sort_values(&#39;Deaths&#39;)[&quot;Deaths&quot;].values[-10:],color=&quot;crimson&quot;) plt.tick_params(size=5,labelsize = 13) plt.xlabel(&quot;Deaths Cases&quot;,fontsize=18) plt.title(&quot;Top 10 Countries (Deaths Cases)&quot;,fontsize=20) plt.grid(alpha=0.3,which=&#39;both&#39;) #plt.savefig(out+&#39;Top 10 Countries (Deaths Cases).png&#39;) . . #collapse-hide f = plt.figure(figsize=(10,5)) f.add_subplot(111) plt.axes(axisbelow=True) plt.barh(df_countries_cases.sort_values(&#39;Active&#39;)[&quot;Active&quot;].index[-10:],df_countries_cases.sort_values(&#39;Active&#39;)[&quot;Active&quot;].values[-10:],color=&quot;darkorange&quot;) plt.tick_params(size=5,labelsize = 13) plt.xlabel(&quot;Active Cases&quot;,fontsize=18) plt.title(&quot;Top 10 Countries (Active Cases)&quot;,fontsize=20) plt.grid(alpha=0.3,which=&#39;both&#39;) #plt.savefig(out+&#39;Top 10 Countries (Active Cases).png&#39;) . . #collapse-hide f = plt.figure(figsize=(10,5)) f.add_subplot(111) plt.axes(axisbelow=True) plt.barh(df_countries_cases.sort_values(&#39;Recovered&#39;)[&quot;Recovered&quot;].index[-10:],df_countries_cases.sort_values(&#39;Recovered&#39;)[&quot;Recovered&quot;].values[-10:],color=&quot;limegreen&quot;) plt.tick_params(size=5,labelsize = 13) plt.xlabel(&quot;Recovered Cases&quot;,fontsize=18) plt.title(&quot;Top 10 Countries (Recovered Cases)&quot;,fontsize=20) plt.grid(alpha=0.3,which=&#39;both&#39;) #plt.savefig(out+&#39;Top 10 Countries (Recovered Cases).png&#39;) . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . #collapse-show import pandas as pd import altair as alt cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://skelwadkar.github.io/Covid19_dashboard/2020/08/09/project-covid19-Copy1.html",
            "relUrl": "/2020/08/09/project-covid19-Copy1.html",
            "date": " • Aug 9, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://skelwadkar.github.io/Covid19_dashboard/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://skelwadkar.github.io/Covid19_dashboard/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://skelwadkar.github.io/Covid19_dashboard/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}